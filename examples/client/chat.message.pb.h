// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2emessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2emessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2emessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2emessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2emessage_2eproto;
namespace ChatPb {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class MsgAck;
class MsgAckDefaultTypeInternal;
extern MsgAckDefaultTypeInternal _MsgAck_default_instance_;
class UnreceivedMessage;
class UnreceivedMessageDefaultTypeInternal;
extern UnreceivedMessageDefaultTypeInternal _UnreceivedMessage_default_instance_;
class UnreceivedMessageRES;
class UnreceivedMessageRESDefaultTypeInternal;
extern UnreceivedMessageRESDefaultTypeInternal _UnreceivedMessageRES_default_instance_;
class openReceivedMessageREQ;
class openReceivedMessageREQDefaultTypeInternal;
extern openReceivedMessageREQDefaultTypeInternal _openReceivedMessageREQ_default_instance_;
}  // namespace ChatPb
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatPb::Message* Arena::CreateMaybeMessage<::ChatPb::Message>(Arena*);
template<> ::ChatPb::MsgAck* Arena::CreateMaybeMessage<::ChatPb::MsgAck>(Arena*);
template<> ::ChatPb::UnreceivedMessage* Arena::CreateMaybeMessage<::ChatPb::UnreceivedMessage>(Arena*);
template<> ::ChatPb::UnreceivedMessageRES* Arena::CreateMaybeMessage<::ChatPb::UnreceivedMessageRES>(Arena*);
template<> ::ChatPb::openReceivedMessageREQ* Arena::CreateMaybeMessage<::ChatPb::openReceivedMessageREQ>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChatPb {

enum MsgType : int {
  STRING = 0,
  PICTURE = 1,
  FILE = 2,
  VOICE = 3,
  VIDEO = 4,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = STRING;
constexpr MsgType MsgType_MAX = VIDEO;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    const std::string& name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatPb.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatPb.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2emessage_2eproto);
    return ::descriptor_table_chat_2emessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatIdFieldNumber = 1,
    kFromUserIdFieldNumber = 2,
    kMessageFieldNumber = 4,
    kLocalIdFieldNumber = 5,
    kOssObjectNameFieldNumber = 8,
    kMessageIdFieldNumber = 10,
    kBinaryBase64FieldNumber = 11,
    kDurationFieldNumber = 3,
    kTypeFieldNumber = 7,
    kMsgTimeFieldNumber = 6,
    kFileSizeFieldNumber = 9,
  };
  // string chatId = 1;
  void clear_chatid();
  const std::string& chatid() const;
  void set_chatid(const std::string& value);
  void set_chatid(std::string&& value);
  void set_chatid(const char* value);
  void set_chatid(const char* value, size_t size);
  std::string* mutable_chatid();
  std::string* release_chatid();
  void set_allocated_chatid(std::string* chatid);
  private:
  const std::string& _internal_chatid() const;
  void _internal_set_chatid(const std::string& value);
  std::string* _internal_mutable_chatid();
  public:

  // string fromUserId = 2;
  void clear_fromuserid();
  const std::string& fromuserid() const;
  void set_fromuserid(const std::string& value);
  void set_fromuserid(std::string&& value);
  void set_fromuserid(const char* value);
  void set_fromuserid(const char* value, size_t size);
  std::string* mutable_fromuserid();
  std::string* release_fromuserid();
  void set_allocated_fromuserid(std::string* fromuserid);
  private:
  const std::string& _internal_fromuserid() const;
  void _internal_set_fromuserid(const std::string& value);
  std::string* _internal_mutable_fromuserid();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string localId = 5;
  void clear_localid();
  const std::string& localid() const;
  void set_localid(const std::string& value);
  void set_localid(std::string&& value);
  void set_localid(const char* value);
  void set_localid(const char* value, size_t size);
  std::string* mutable_localid();
  std::string* release_localid();
  void set_allocated_localid(std::string* localid);
  private:
  const std::string& _internal_localid() const;
  void _internal_set_localid(const std::string& value);
  std::string* _internal_mutable_localid();
  public:

  // string ossObjectName = 8;
  void clear_ossobjectname();
  const std::string& ossobjectname() const;
  void set_ossobjectname(const std::string& value);
  void set_ossobjectname(std::string&& value);
  void set_ossobjectname(const char* value);
  void set_ossobjectname(const char* value, size_t size);
  std::string* mutable_ossobjectname();
  std::string* release_ossobjectname();
  void set_allocated_ossobjectname(std::string* ossobjectname);
  private:
  const std::string& _internal_ossobjectname() const;
  void _internal_set_ossobjectname(const std::string& value);
  std::string* _internal_mutable_ossobjectname();
  public:

  // string messageId = 10;
  void clear_messageid();
  const std::string& messageid() const;
  void set_messageid(const std::string& value);
  void set_messageid(std::string&& value);
  void set_messageid(const char* value);
  void set_messageid(const char* value, size_t size);
  std::string* mutable_messageid();
  std::string* release_messageid();
  void set_allocated_messageid(std::string* messageid);
  private:
  const std::string& _internal_messageid() const;
  void _internal_set_messageid(const std::string& value);
  std::string* _internal_mutable_messageid();
  public:

  // string binaryBase64 = 11;
  void clear_binarybase64();
  const std::string& binarybase64() const;
  void set_binarybase64(const std::string& value);
  void set_binarybase64(std::string&& value);
  void set_binarybase64(const char* value);
  void set_binarybase64(const char* value, size_t size);
  std::string* mutable_binarybase64();
  std::string* release_binarybase64();
  void set_allocated_binarybase64(std::string* binarybase64);
  private:
  const std::string& _internal_binarybase64() const;
  void _internal_set_binarybase64(const std::string& value);
  std::string* _internal_mutable_binarybase64();
  public:

  // uint32 duration = 3;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .ChatPb.MsgType type = 7;
  void clear_type();
  ::ChatPb::MsgType type() const;
  void set_type(::ChatPb::MsgType value);
  private:
  ::ChatPb::MsgType _internal_type() const;
  void _internal_set_type(::ChatPb::MsgType value);
  public:

  // uint64 msgTime = 6;
  void clear_msgtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 msgtime() const;
  void set_msgtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msgtime() const;
  void _internal_set_msgtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fileSize = 9;
  void clear_filesize();
  ::PROTOBUF_NAMESPACE_ID::uint64 filesize() const;
  void set_filesize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_filesize() const;
  void _internal_set_filesize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatPb.Message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromuserid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ossobjectname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messageid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binarybase64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msgtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 filesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2emessage_2eproto;
};
// -------------------------------------------------------------------

class MsgAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatPb.MsgAck) */ {
 public:
  MsgAck();
  virtual ~MsgAck();

  MsgAck(const MsgAck& from);
  MsgAck(MsgAck&& from) noexcept
    : MsgAck() {
    *this = ::std::move(from);
  }

  inline MsgAck& operator=(const MsgAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgAck& operator=(MsgAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgAck* internal_default_instance() {
    return reinterpret_cast<const MsgAck*>(
               &_MsgAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgAck& a, MsgAck& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgAck* New() const final {
    return CreateMaybeMessage<MsgAck>(nullptr);
  }

  MsgAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgAck& from);
  void MergeFrom(const MsgAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatPb.MsgAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2emessage_2eproto);
    return ::descriptor_table_chat_2emessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatIdFieldNumber = 1,
    kFromUserIdFieldNumber = 2,
  };
  // string chatId = 1;
  void clear_chatid();
  const std::string& chatid() const;
  void set_chatid(const std::string& value);
  void set_chatid(std::string&& value);
  void set_chatid(const char* value);
  void set_chatid(const char* value, size_t size);
  std::string* mutable_chatid();
  std::string* release_chatid();
  void set_allocated_chatid(std::string* chatid);
  private:
  const std::string& _internal_chatid() const;
  void _internal_set_chatid(const std::string& value);
  std::string* _internal_mutable_chatid();
  public:

  // string fromUserId = 2;
  void clear_fromuserid();
  const std::string& fromuserid() const;
  void set_fromuserid(const std::string& value);
  void set_fromuserid(std::string&& value);
  void set_fromuserid(const char* value);
  void set_fromuserid(const char* value, size_t size);
  std::string* mutable_fromuserid();
  std::string* release_fromuserid();
  void set_allocated_fromuserid(std::string* fromuserid);
  private:
  const std::string& _internal_fromuserid() const;
  void _internal_set_fromuserid(const std::string& value);
  std::string* _internal_mutable_fromuserid();
  public:

  // @@protoc_insertion_point(class_scope:ChatPb.MsgAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromuserid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2emessage_2eproto;
};
// -------------------------------------------------------------------

class UnreceivedMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatPb.UnreceivedMessage) */ {
 public:
  UnreceivedMessage();
  virtual ~UnreceivedMessage();

  UnreceivedMessage(const UnreceivedMessage& from);
  UnreceivedMessage(UnreceivedMessage&& from) noexcept
    : UnreceivedMessage() {
    *this = ::std::move(from);
  }

  inline UnreceivedMessage& operator=(const UnreceivedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnreceivedMessage& operator=(UnreceivedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnreceivedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnreceivedMessage* internal_default_instance() {
    return reinterpret_cast<const UnreceivedMessage*>(
               &_UnreceivedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnreceivedMessage& a, UnreceivedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnreceivedMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnreceivedMessage* New() const final {
    return CreateMaybeMessage<UnreceivedMessage>(nullptr);
  }

  UnreceivedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnreceivedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnreceivedMessage& from);
  void MergeFrom(const UnreceivedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnreceivedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatPb.UnreceivedMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2emessage_2eproto);
    return ::descriptor_table_chat_2emessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 2,
    kCountFieldNumber = 1,
  };
  // repeated .ChatPb.Message msgs = 2;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  ::ChatPb::Message* mutable_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatPb::Message >*
      mutable_msgs();
  private:
  const ::ChatPb::Message& _internal_msgs(int index) const;
  ::ChatPb::Message* _internal_add_msgs();
  public:
  const ::ChatPb::Message& msgs(int index) const;
  ::ChatPb::Message* add_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatPb::Message >&
      msgs() const;

  // int32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatPb.UnreceivedMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatPb::Message > msgs_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2emessage_2eproto;
};
// -------------------------------------------------------------------

class openReceivedMessageREQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatPb.openReceivedMessageREQ) */ {
 public:
  openReceivedMessageREQ();
  virtual ~openReceivedMessageREQ();

  openReceivedMessageREQ(const openReceivedMessageREQ& from);
  openReceivedMessageREQ(openReceivedMessageREQ&& from) noexcept
    : openReceivedMessageREQ() {
    *this = ::std::move(from);
  }

  inline openReceivedMessageREQ& operator=(const openReceivedMessageREQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline openReceivedMessageREQ& operator=(openReceivedMessageREQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const openReceivedMessageREQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const openReceivedMessageREQ* internal_default_instance() {
    return reinterpret_cast<const openReceivedMessageREQ*>(
               &_openReceivedMessageREQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(openReceivedMessageREQ& a, openReceivedMessageREQ& b) {
    a.Swap(&b);
  }
  inline void Swap(openReceivedMessageREQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline openReceivedMessageREQ* New() const final {
    return CreateMaybeMessage<openReceivedMessageREQ>(nullptr);
  }

  openReceivedMessageREQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<openReceivedMessageREQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const openReceivedMessageREQ& from);
  void MergeFrom(const openReceivedMessageREQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(openReceivedMessageREQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatPb.openReceivedMessageREQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2emessage_2eproto);
    return ::descriptor_table_chat_2emessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCliendIdFieldNumber = 2,
    kOnFieldNumber = 1,
  };
  // uint64 cliendId = 2;
  void clear_cliendid();
  ::PROTOBUF_NAMESPACE_ID::uint64 cliendid() const;
  void set_cliendid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cliendid() const;
  void _internal_set_cliendid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool on = 1;
  void clear_on();
  bool on() const;
  void set_on(bool value);
  private:
  bool _internal_on() const;
  void _internal_set_on(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ChatPb.openReceivedMessageREQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cliendid_;
  bool on_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2emessage_2eproto;
};
// -------------------------------------------------------------------

class UnreceivedMessageRES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatPb.UnreceivedMessageRES) */ {
 public:
  UnreceivedMessageRES();
  virtual ~UnreceivedMessageRES();

  UnreceivedMessageRES(const UnreceivedMessageRES& from);
  UnreceivedMessageRES(UnreceivedMessageRES&& from) noexcept
    : UnreceivedMessageRES() {
    *this = ::std::move(from);
  }

  inline UnreceivedMessageRES& operator=(const UnreceivedMessageRES& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnreceivedMessageRES& operator=(UnreceivedMessageRES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnreceivedMessageRES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnreceivedMessageRES* internal_default_instance() {
    return reinterpret_cast<const UnreceivedMessageRES*>(
               &_UnreceivedMessageRES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UnreceivedMessageRES& a, UnreceivedMessageRES& b) {
    a.Swap(&b);
  }
  inline void Swap(UnreceivedMessageRES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnreceivedMessageRES* New() const final {
    return CreateMaybeMessage<UnreceivedMessageRES>(nullptr);
  }

  UnreceivedMessageRES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnreceivedMessageRES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnreceivedMessageRES& from);
  void MergeFrom(const UnreceivedMessageRES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnreceivedMessageRES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatPb.UnreceivedMessageRES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2emessage_2eproto);
    return ::descriptor_table_chat_2emessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnreceivedMessagesFieldNumber = 1,
    kCliendIdFieldNumber = 2,
  };
  // repeated .ChatPb.UnreceivedMessage unreceivedMessages = 1;
  int unreceivedmessages_size() const;
  private:
  int _internal_unreceivedmessages_size() const;
  public:
  void clear_unreceivedmessages();
  ::ChatPb::UnreceivedMessage* mutable_unreceivedmessages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatPb::UnreceivedMessage >*
      mutable_unreceivedmessages();
  private:
  const ::ChatPb::UnreceivedMessage& _internal_unreceivedmessages(int index) const;
  ::ChatPb::UnreceivedMessage* _internal_add_unreceivedmessages();
  public:
  const ::ChatPb::UnreceivedMessage& unreceivedmessages(int index) const;
  ::ChatPb::UnreceivedMessage* add_unreceivedmessages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatPb::UnreceivedMessage >&
      unreceivedmessages() const;

  // uint64 cliendId = 2;
  void clear_cliendid();
  ::PROTOBUF_NAMESPACE_ID::uint64 cliendid() const;
  void set_cliendid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cliendid() const;
  void _internal_set_cliendid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatPb.UnreceivedMessageRES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatPb::UnreceivedMessage > unreceivedmessages_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cliendid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2emessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// string chatId = 1;
inline void Message::clear_chatid() {
  chatid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::chatid() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.chatId)
  return _internal_chatid();
}
inline void Message::set_chatid(const std::string& value) {
  _internal_set_chatid(value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.chatId)
}
inline std::string* Message::mutable_chatid() {
  // @@protoc_insertion_point(field_mutable:ChatPb.Message.chatId)
  return _internal_mutable_chatid();
}
inline const std::string& Message::_internal_chatid() const {
  return chatid_.GetNoArena();
}
inline void Message::_internal_set_chatid(const std::string& value) {
  
  chatid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_chatid(std::string&& value) {
  
  chatid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Message.chatId)
}
inline void Message::set_chatid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chatid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Message.chatId)
}
inline void Message::set_chatid(const char* value, size_t size) {
  
  chatid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Message.chatId)
}
inline std::string* Message::_internal_mutable_chatid() {
  
  return chatid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_chatid() {
  // @@protoc_insertion_point(field_release:ChatPb.Message.chatId)
  
  return chatid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_chatid(std::string* chatid) {
  if (chatid != nullptr) {
    
  } else {
    
  }
  chatid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Message.chatId)
}

// string fromUserId = 2;
inline void Message::clear_fromuserid() {
  fromuserid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::fromuserid() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.fromUserId)
  return _internal_fromuserid();
}
inline void Message::set_fromuserid(const std::string& value) {
  _internal_set_fromuserid(value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.fromUserId)
}
inline std::string* Message::mutable_fromuserid() {
  // @@protoc_insertion_point(field_mutable:ChatPb.Message.fromUserId)
  return _internal_mutable_fromuserid();
}
inline const std::string& Message::_internal_fromuserid() const {
  return fromuserid_.GetNoArena();
}
inline void Message::_internal_set_fromuserid(const std::string& value) {
  
  fromuserid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_fromuserid(std::string&& value) {
  
  fromuserid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Message.fromUserId)
}
inline void Message::set_fromuserid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fromuserid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Message.fromUserId)
}
inline void Message::set_fromuserid(const char* value, size_t size) {
  
  fromuserid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Message.fromUserId)
}
inline std::string* Message::_internal_mutable_fromuserid() {
  
  return fromuserid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_fromuserid() {
  // @@protoc_insertion_point(field_release:ChatPb.Message.fromUserId)
  
  return fromuserid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_fromuserid(std::string* fromuserid) {
  if (fromuserid != nullptr) {
    
  } else {
    
  }
  fromuserid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromuserid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Message.fromUserId)
}

// uint32 duration = 3;
inline void Message::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::duration() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.duration)
  return _internal_duration();
}
inline void Message::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
}
inline void Message::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.duration)
}

// string message = 4;
inline void Message::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::message() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.message)
  return _internal_message();
}
inline void Message::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.message)
}
inline std::string* Message::mutable_message() {
  // @@protoc_insertion_point(field_mutable:ChatPb.Message.message)
  return _internal_mutable_message();
}
inline const std::string& Message::_internal_message() const {
  return message_.GetNoArena();
}
inline void Message::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Message.message)
}
inline void Message::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Message.message)
}
inline void Message::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Message.message)
}
inline std::string* Message::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_message() {
  // @@protoc_insertion_point(field_release:ChatPb.Message.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Message.message)
}

// string localId = 5;
inline void Message::clear_localid() {
  localid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::localid() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.localId)
  return _internal_localid();
}
inline void Message::set_localid(const std::string& value) {
  _internal_set_localid(value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.localId)
}
inline std::string* Message::mutable_localid() {
  // @@protoc_insertion_point(field_mutable:ChatPb.Message.localId)
  return _internal_mutable_localid();
}
inline const std::string& Message::_internal_localid() const {
  return localid_.GetNoArena();
}
inline void Message::_internal_set_localid(const std::string& value) {
  
  localid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_localid(std::string&& value) {
  
  localid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Message.localId)
}
inline void Message::set_localid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  localid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Message.localId)
}
inline void Message::set_localid(const char* value, size_t size) {
  
  localid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Message.localId)
}
inline std::string* Message::_internal_mutable_localid() {
  
  return localid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_localid() {
  // @@protoc_insertion_point(field_release:ChatPb.Message.localId)
  
  return localid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_localid(std::string* localid) {
  if (localid != nullptr) {
    
  } else {
    
  }
  localid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Message.localId)
}

// uint64 msgTime = 6;
inline void Message::clear_msgtime() {
  msgtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_msgtime() const {
  return msgtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::msgtime() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.msgTime)
  return _internal_msgtime();
}
inline void Message::_internal_set_msgtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msgtime_ = value;
}
inline void Message::set_msgtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msgtime(value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.msgTime)
}

// .ChatPb.MsgType type = 7;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::ChatPb::MsgType Message::_internal_type() const {
  return static_cast< ::ChatPb::MsgType >(type_);
}
inline ::ChatPb::MsgType Message::type() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(::ChatPb::MsgType value) {
  
  type_ = value;
}
inline void Message::set_type(::ChatPb::MsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.type)
}

// string ossObjectName = 8;
inline void Message::clear_ossobjectname() {
  ossobjectname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::ossobjectname() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.ossObjectName)
  return _internal_ossobjectname();
}
inline void Message::set_ossobjectname(const std::string& value) {
  _internal_set_ossobjectname(value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.ossObjectName)
}
inline std::string* Message::mutable_ossobjectname() {
  // @@protoc_insertion_point(field_mutable:ChatPb.Message.ossObjectName)
  return _internal_mutable_ossobjectname();
}
inline const std::string& Message::_internal_ossobjectname() const {
  return ossobjectname_.GetNoArena();
}
inline void Message::_internal_set_ossobjectname(const std::string& value) {
  
  ossobjectname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_ossobjectname(std::string&& value) {
  
  ossobjectname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Message.ossObjectName)
}
inline void Message::set_ossobjectname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ossobjectname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Message.ossObjectName)
}
inline void Message::set_ossobjectname(const char* value, size_t size) {
  
  ossobjectname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Message.ossObjectName)
}
inline std::string* Message::_internal_mutable_ossobjectname() {
  
  return ossobjectname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_ossobjectname() {
  // @@protoc_insertion_point(field_release:ChatPb.Message.ossObjectName)
  
  return ossobjectname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_ossobjectname(std::string* ossobjectname) {
  if (ossobjectname != nullptr) {
    
  } else {
    
  }
  ossobjectname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ossobjectname);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Message.ossObjectName)
}

// uint64 fileSize = 9;
inline void Message::clear_filesize() {
  filesize_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_filesize() const {
  return filesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::filesize() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.fileSize)
  return _internal_filesize();
}
inline void Message::_internal_set_filesize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  filesize_ = value;
}
inline void Message::set_filesize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.fileSize)
}

// string messageId = 10;
inline void Message::clear_messageid() {
  messageid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::messageid() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.messageId)
  return _internal_messageid();
}
inline void Message::set_messageid(const std::string& value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.messageId)
}
inline std::string* Message::mutable_messageid() {
  // @@protoc_insertion_point(field_mutable:ChatPb.Message.messageId)
  return _internal_mutable_messageid();
}
inline const std::string& Message::_internal_messageid() const {
  return messageid_.GetNoArena();
}
inline void Message::_internal_set_messageid(const std::string& value) {
  
  messageid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_messageid(std::string&& value) {
  
  messageid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Message.messageId)
}
inline void Message::set_messageid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  messageid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Message.messageId)
}
inline void Message::set_messageid(const char* value, size_t size) {
  
  messageid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Message.messageId)
}
inline std::string* Message::_internal_mutable_messageid() {
  
  return messageid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_messageid() {
  // @@protoc_insertion_point(field_release:ChatPb.Message.messageId)
  
  return messageid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_messageid(std::string* messageid) {
  if (messageid != nullptr) {
    
  } else {
    
  }
  messageid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), messageid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Message.messageId)
}

// string binaryBase64 = 11;
inline void Message::clear_binarybase64() {
  binarybase64_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::binarybase64() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.binaryBase64)
  return _internal_binarybase64();
}
inline void Message::set_binarybase64(const std::string& value) {
  _internal_set_binarybase64(value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.binaryBase64)
}
inline std::string* Message::mutable_binarybase64() {
  // @@protoc_insertion_point(field_mutable:ChatPb.Message.binaryBase64)
  return _internal_mutable_binarybase64();
}
inline const std::string& Message::_internal_binarybase64() const {
  return binarybase64_.GetNoArena();
}
inline void Message::_internal_set_binarybase64(const std::string& value) {
  
  binarybase64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_binarybase64(std::string&& value) {
  
  binarybase64_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Message.binaryBase64)
}
inline void Message::set_binarybase64(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  binarybase64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Message.binaryBase64)
}
inline void Message::set_binarybase64(const char* value, size_t size) {
  
  binarybase64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Message.binaryBase64)
}
inline std::string* Message::_internal_mutable_binarybase64() {
  
  return binarybase64_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_binarybase64() {
  // @@protoc_insertion_point(field_release:ChatPb.Message.binaryBase64)
  
  return binarybase64_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_binarybase64(std::string* binarybase64) {
  if (binarybase64 != nullptr) {
    
  } else {
    
  }
  binarybase64_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), binarybase64);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Message.binaryBase64)
}

// -------------------------------------------------------------------

// MsgAck

// string chatId = 1;
inline void MsgAck::clear_chatid() {
  chatid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgAck::chatid() const {
  // @@protoc_insertion_point(field_get:ChatPb.MsgAck.chatId)
  return _internal_chatid();
}
inline void MsgAck::set_chatid(const std::string& value) {
  _internal_set_chatid(value);
  // @@protoc_insertion_point(field_set:ChatPb.MsgAck.chatId)
}
inline std::string* MsgAck::mutable_chatid() {
  // @@protoc_insertion_point(field_mutable:ChatPb.MsgAck.chatId)
  return _internal_mutable_chatid();
}
inline const std::string& MsgAck::_internal_chatid() const {
  return chatid_.GetNoArena();
}
inline void MsgAck::_internal_set_chatid(const std::string& value) {
  
  chatid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgAck::set_chatid(std::string&& value) {
  
  chatid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.MsgAck.chatId)
}
inline void MsgAck::set_chatid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chatid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.MsgAck.chatId)
}
inline void MsgAck::set_chatid(const char* value, size_t size) {
  
  chatid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.MsgAck.chatId)
}
inline std::string* MsgAck::_internal_mutable_chatid() {
  
  return chatid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgAck::release_chatid() {
  // @@protoc_insertion_point(field_release:ChatPb.MsgAck.chatId)
  
  return chatid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgAck::set_allocated_chatid(std::string* chatid) {
  if (chatid != nullptr) {
    
  } else {
    
  }
  chatid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.MsgAck.chatId)
}

// string fromUserId = 2;
inline void MsgAck::clear_fromuserid() {
  fromuserid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgAck::fromuserid() const {
  // @@protoc_insertion_point(field_get:ChatPb.MsgAck.fromUserId)
  return _internal_fromuserid();
}
inline void MsgAck::set_fromuserid(const std::string& value) {
  _internal_set_fromuserid(value);
  // @@protoc_insertion_point(field_set:ChatPb.MsgAck.fromUserId)
}
inline std::string* MsgAck::mutable_fromuserid() {
  // @@protoc_insertion_point(field_mutable:ChatPb.MsgAck.fromUserId)
  return _internal_mutable_fromuserid();
}
inline const std::string& MsgAck::_internal_fromuserid() const {
  return fromuserid_.GetNoArena();
}
inline void MsgAck::_internal_set_fromuserid(const std::string& value) {
  
  fromuserid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgAck::set_fromuserid(std::string&& value) {
  
  fromuserid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.MsgAck.fromUserId)
}
inline void MsgAck::set_fromuserid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fromuserid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.MsgAck.fromUserId)
}
inline void MsgAck::set_fromuserid(const char* value, size_t size) {
  
  fromuserid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.MsgAck.fromUserId)
}
inline std::string* MsgAck::_internal_mutable_fromuserid() {
  
  return fromuserid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgAck::release_fromuserid() {
  // @@protoc_insertion_point(field_release:ChatPb.MsgAck.fromUserId)
  
  return fromuserid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgAck::set_allocated_fromuserid(std::string* fromuserid) {
  if (fromuserid != nullptr) {
    
  } else {
    
  }
  fromuserid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromuserid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.MsgAck.fromUserId)
}

// -------------------------------------------------------------------

// UnreceivedMessage

// int32 count = 1;
inline void UnreceivedMessage::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnreceivedMessage::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnreceivedMessage::count() const {
  // @@protoc_insertion_point(field_get:ChatPb.UnreceivedMessage.count)
  return _internal_count();
}
inline void UnreceivedMessage::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void UnreceivedMessage::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:ChatPb.UnreceivedMessage.count)
}

// repeated .ChatPb.Message msgs = 2;
inline int UnreceivedMessage::_internal_msgs_size() const {
  return msgs_.size();
}
inline int UnreceivedMessage::msgs_size() const {
  return _internal_msgs_size();
}
inline void UnreceivedMessage::clear_msgs() {
  msgs_.Clear();
}
inline ::ChatPb::Message* UnreceivedMessage::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:ChatPb.UnreceivedMessage.msgs)
  return msgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatPb::Message >*
UnreceivedMessage::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:ChatPb.UnreceivedMessage.msgs)
  return &msgs_;
}
inline const ::ChatPb::Message& UnreceivedMessage::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const ::ChatPb::Message& UnreceivedMessage::msgs(int index) const {
  // @@protoc_insertion_point(field_get:ChatPb.UnreceivedMessage.msgs)
  return _internal_msgs(index);
}
inline ::ChatPb::Message* UnreceivedMessage::_internal_add_msgs() {
  return msgs_.Add();
}
inline ::ChatPb::Message* UnreceivedMessage::add_msgs() {
  // @@protoc_insertion_point(field_add:ChatPb.UnreceivedMessage.msgs)
  return _internal_add_msgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatPb::Message >&
UnreceivedMessage::msgs() const {
  // @@protoc_insertion_point(field_list:ChatPb.UnreceivedMessage.msgs)
  return msgs_;
}

// -------------------------------------------------------------------

// openReceivedMessageREQ

// bool on = 1;
inline void openReceivedMessageREQ::clear_on() {
  on_ = false;
}
inline bool openReceivedMessageREQ::_internal_on() const {
  return on_;
}
inline bool openReceivedMessageREQ::on() const {
  // @@protoc_insertion_point(field_get:ChatPb.openReceivedMessageREQ.on)
  return _internal_on();
}
inline void openReceivedMessageREQ::_internal_set_on(bool value) {
  
  on_ = value;
}
inline void openReceivedMessageREQ::set_on(bool value) {
  _internal_set_on(value);
  // @@protoc_insertion_point(field_set:ChatPb.openReceivedMessageREQ.on)
}

// uint64 cliendId = 2;
inline void openReceivedMessageREQ::clear_cliendid() {
  cliendid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 openReceivedMessageREQ::_internal_cliendid() const {
  return cliendid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 openReceivedMessageREQ::cliendid() const {
  // @@protoc_insertion_point(field_get:ChatPb.openReceivedMessageREQ.cliendId)
  return _internal_cliendid();
}
inline void openReceivedMessageREQ::_internal_set_cliendid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cliendid_ = value;
}
inline void openReceivedMessageREQ::set_cliendid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cliendid(value);
  // @@protoc_insertion_point(field_set:ChatPb.openReceivedMessageREQ.cliendId)
}

// -------------------------------------------------------------------

// UnreceivedMessageRES

// repeated .ChatPb.UnreceivedMessage unreceivedMessages = 1;
inline int UnreceivedMessageRES::_internal_unreceivedmessages_size() const {
  return unreceivedmessages_.size();
}
inline int UnreceivedMessageRES::unreceivedmessages_size() const {
  return _internal_unreceivedmessages_size();
}
inline void UnreceivedMessageRES::clear_unreceivedmessages() {
  unreceivedmessages_.Clear();
}
inline ::ChatPb::UnreceivedMessage* UnreceivedMessageRES::mutable_unreceivedmessages(int index) {
  // @@protoc_insertion_point(field_mutable:ChatPb.UnreceivedMessageRES.unreceivedMessages)
  return unreceivedmessages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatPb::UnreceivedMessage >*
UnreceivedMessageRES::mutable_unreceivedmessages() {
  // @@protoc_insertion_point(field_mutable_list:ChatPb.UnreceivedMessageRES.unreceivedMessages)
  return &unreceivedmessages_;
}
inline const ::ChatPb::UnreceivedMessage& UnreceivedMessageRES::_internal_unreceivedmessages(int index) const {
  return unreceivedmessages_.Get(index);
}
inline const ::ChatPb::UnreceivedMessage& UnreceivedMessageRES::unreceivedmessages(int index) const {
  // @@protoc_insertion_point(field_get:ChatPb.UnreceivedMessageRES.unreceivedMessages)
  return _internal_unreceivedmessages(index);
}
inline ::ChatPb::UnreceivedMessage* UnreceivedMessageRES::_internal_add_unreceivedmessages() {
  return unreceivedmessages_.Add();
}
inline ::ChatPb::UnreceivedMessage* UnreceivedMessageRES::add_unreceivedmessages() {
  // @@protoc_insertion_point(field_add:ChatPb.UnreceivedMessageRES.unreceivedMessages)
  return _internal_add_unreceivedmessages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatPb::UnreceivedMessage >&
UnreceivedMessageRES::unreceivedmessages() const {
  // @@protoc_insertion_point(field_list:ChatPb.UnreceivedMessageRES.unreceivedMessages)
  return unreceivedmessages_;
}

// uint64 cliendId = 2;
inline void UnreceivedMessageRES::clear_cliendid() {
  cliendid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnreceivedMessageRES::_internal_cliendid() const {
  return cliendid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnreceivedMessageRES::cliendid() const {
  // @@protoc_insertion_point(field_get:ChatPb.UnreceivedMessageRES.cliendId)
  return _internal_cliendid();
}
inline void UnreceivedMessageRES::_internal_set_cliendid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cliendid_ = value;
}
inline void UnreceivedMessageRES::set_cliendid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cliendid(value);
  // @@protoc_insertion_point(field_set:ChatPb.UnreceivedMessageRES.cliendId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChatPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChatPb::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatPb::MsgType>() {
  return ::ChatPb::MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2emessage_2eproto
