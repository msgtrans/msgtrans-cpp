// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.message.proto

#include "chat.message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chat_2emessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_chat_2emessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2emessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnreceivedMessage_chat_2emessage_2eproto;
namespace ChatPb {
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
class MsgAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgAck> _instance;
} _MsgAck_default_instance_;
class UnreceivedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnreceivedMessage> _instance;
} _UnreceivedMessage_default_instance_;
class openReceivedMessageREQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<openReceivedMessageREQ> _instance;
} _openReceivedMessageREQ_default_instance_;
class UnreceivedMessageRESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnreceivedMessageRES> _instance;
} _UnreceivedMessageRES_default_instance_;
}  // namespace ChatPb
static void InitDefaultsscc_info_Message_chat_2emessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatPb::_Message_default_instance_;
    new (ptr) ::ChatPb::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatPb::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_chat_2emessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_chat_2emessage_2eproto}, {}};

static void InitDefaultsscc_info_MsgAck_chat_2emessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatPb::_MsgAck_default_instance_;
    new (ptr) ::ChatPb::MsgAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatPb::MsgAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgAck_chat_2emessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgAck_chat_2emessage_2eproto}, {}};

static void InitDefaultsscc_info_UnreceivedMessage_chat_2emessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatPb::_UnreceivedMessage_default_instance_;
    new (ptr) ::ChatPb::UnreceivedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatPb::UnreceivedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnreceivedMessage_chat_2emessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnreceivedMessage_chat_2emessage_2eproto}, {
      &scc_info_Message_chat_2emessage_2eproto.base,}};

static void InitDefaultsscc_info_UnreceivedMessageRES_chat_2emessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatPb::_UnreceivedMessageRES_default_instance_;
    new (ptr) ::ChatPb::UnreceivedMessageRES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatPb::UnreceivedMessageRES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnreceivedMessageRES_chat_2emessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnreceivedMessageRES_chat_2emessage_2eproto}, {
      &scc_info_UnreceivedMessage_chat_2emessage_2eproto.base,}};

static void InitDefaultsscc_info_openReceivedMessageREQ_chat_2emessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatPb::_openReceivedMessageREQ_default_instance_;
    new (ptr) ::ChatPb::openReceivedMessageREQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatPb::openReceivedMessageREQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_openReceivedMessageREQ_chat_2emessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_openReceivedMessageREQ_chat_2emessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chat_2emessage_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_chat_2emessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chat_2emessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chat_2emessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatPb::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatPb::Message, chatid_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::Message, fromuserid_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::Message, duration_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::Message, message_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::Message, localid_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::Message, msgtime_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::Message, type_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::Message, ossobjectname_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::Message, filesize_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::Message, messageid_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::Message, binarybase64_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatPb::MsgAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatPb::MsgAck, chatid_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::MsgAck, fromuserid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatPb::UnreceivedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatPb::UnreceivedMessage, count_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::UnreceivedMessage, msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatPb::openReceivedMessageREQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatPb::openReceivedMessageREQ, on_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::openReceivedMessageREQ, cliendid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatPb::UnreceivedMessageRES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatPb::UnreceivedMessageRES, unreceivedmessages_),
  PROTOBUF_FIELD_OFFSET(::ChatPb::UnreceivedMessageRES, cliendid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChatPb::Message)},
  { 16, -1, sizeof(::ChatPb::MsgAck)},
  { 23, -1, sizeof(::ChatPb::UnreceivedMessage)},
  { 30, -1, sizeof(::ChatPb::openReceivedMessageREQ)},
  { 37, -1, sizeof(::ChatPb::UnreceivedMessageRES)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatPb::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatPb::_MsgAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatPb::_UnreceivedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatPb::_openReceivedMessageREQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatPb::_UnreceivedMessageRES_default_instance_),
};

const char descriptor_table_protodef_chat_2emessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022chat.message.proto\022\006ChatPb\"\343\001\n\007Message"
  "\022\016\n\006chatId\030\001 \001(\t\022\022\n\nfromUserId\030\002 \001(\t\022\020\n\010"
  "duration\030\003 \001(\r\022\017\n\007message\030\004 \001(\t\022\017\n\007local"
  "Id\030\005 \001(\t\022\017\n\007msgTime\030\006 \001(\004\022\035\n\004type\030\007 \001(\0162"
  "\017.ChatPb.MsgType\022\025\n\rossObjectName\030\010 \001(\t\022"
  "\020\n\010fileSize\030\t \001(\004\022\021\n\tmessageId\030\n \001(\t\022\024\n\014"
  "binaryBase64\030\013 \001(\t\",\n\006MsgAck\022\016\n\006chatId\030\001"
  " \001(\t\022\022\n\nfromUserId\030\002 \001(\t\"A\n\021UnreceivedMe"
  "ssage\022\r\n\005count\030\001 \001(\005\022\035\n\004msgs\030\002 \003(\0132\017.Cha"
  "tPb.Message\"6\n\026openReceivedMessageREQ\022\n\n"
  "\002on\030\001 \001(\010\022\020\n\010cliendId\030\002 \001(\004\"_\n\024Unreceive"
  "dMessageRES\0225\n\022unreceivedMessages\030\001 \003(\0132"
  "\031.ChatPb.UnreceivedMessage\022\020\n\010cliendId\030\002"
  " \001(\004*B\n\007MsgType\022\n\n\006STRING\020\000\022\013\n\007PICTURE\020\001"
  "\022\010\n\004FILE\020\002\022\t\n\005VOICE\020\003\022\t\n\005VIDEO\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chat_2emessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chat_2emessage_2eproto_sccs[5] = {
  &scc_info_Message_chat_2emessage_2eproto.base,
  &scc_info_MsgAck_chat_2emessage_2eproto.base,
  &scc_info_UnreceivedMessage_chat_2emessage_2eproto.base,
  &scc_info_UnreceivedMessageRES_chat_2emessage_2eproto.base,
  &scc_info_openReceivedMessageREQ_chat_2emessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chat_2emessage_2eproto_once;
static bool descriptor_table_chat_2emessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2emessage_2eproto = {
  &descriptor_table_chat_2emessage_2eproto_initialized, descriptor_table_protodef_chat_2emessage_2eproto, "chat.message.proto", 600,
  &descriptor_table_chat_2emessage_2eproto_once, descriptor_table_chat_2emessage_2eproto_sccs, descriptor_table_chat_2emessage_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_chat_2emessage_2eproto::offsets,
  file_level_metadata_chat_2emessage_2eproto, 5, file_level_enum_descriptors_chat_2emessage_2eproto, file_level_service_descriptors_chat_2emessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chat_2emessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chat_2emessage_2eproto)), true);
namespace ChatPb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2emessage_2eproto);
  return file_level_enum_descriptors_chat_2emessage_2eproto[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Message::InitAsDefaultInstance() {
}
class Message::_Internal {
 public:
};

Message::Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatPb.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatid().empty()) {
    chatid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chatid_);
  }
  fromuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fromuserid().empty()) {
    fromuserid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fromuserid_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  localid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_localid().empty()) {
    localid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.localid_);
  }
  ossobjectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ossobjectname().empty()) {
    ossobjectname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ossobjectname_);
  }
  messageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_messageid().empty()) {
    messageid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.messageid_);
  }
  binarybase64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_binarybase64().empty()) {
    binarybase64_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.binarybase64_);
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&filesize_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(filesize_));
  // @@protoc_insertion_point(copy_constructor:ChatPb.Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_chat_2emessage_2eproto.base);
  chatid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ossobjectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  messageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binarybase64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filesize_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(filesize_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:ChatPb.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  chatid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromuserid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ossobjectname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  messageid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binarybase64_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_chat_2emessage_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatPb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chatid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromuserid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ossobjectname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  messageid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binarybase64_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filesize_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(filesize_));
  _internal_metadata_.Clear();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string chatId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chatid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatPb.Message.chatId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fromUserId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fromuserid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatPb.Message.fromUserId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatPb.Message.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string localId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_localid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatPb.Message.localId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msgTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          msgtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChatPb.MsgType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ChatPb::MsgType>(val));
        } else goto handle_unusual;
        continue;
      // string ossObjectName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ossobjectname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatPb.Message.ossObjectName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fileSize = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string messageId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_messageid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatPb.Message.messageId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string binaryBase64 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_binarybase64();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatPb.Message.binaryBase64"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatPb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chatId = 1;
  if (this->chatid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chatid().data(), static_cast<int>(this->_internal_chatid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatPb.Message.chatId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chatid(), target);
  }

  // string fromUserId = 2;
  if (this->fromuserid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fromuserid().data(), static_cast<int>(this->_internal_fromuserid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatPb.Message.fromUserId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fromuserid(), target);
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  // string message = 4;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatPb.Message.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // string localId = 5;
  if (this->localid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_localid().data(), static_cast<int>(this->_internal_localid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatPb.Message.localId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_localid(), target);
  }

  // uint64 msgTime = 6;
  if (this->msgtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_msgtime(), target);
  }

  // .ChatPb.MsgType type = 7;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // string ossObjectName = 8;
  if (this->ossobjectname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ossobjectname().data(), static_cast<int>(this->_internal_ossobjectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatPb.Message.ossObjectName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ossobjectname(), target);
  }

  // uint64 fileSize = 9;
  if (this->filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_filesize(), target);
  }

  // string messageId = 10;
  if (this->messageid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_messageid().data(), static_cast<int>(this->_internal_messageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatPb.Message.messageId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_messageid(), target);
  }

  // string binaryBase64 = 11;
  if (this->binarybase64().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_binarybase64().data(), static_cast<int>(this->_internal_binarybase64().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatPb.Message.binaryBase64");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_binarybase64(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatPb.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatPb.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chatId = 1;
  if (this->chatid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatid());
  }

  // string fromUserId = 2;
  if (this->fromuserid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromuserid());
  }

  // string message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string localId = 5;
  if (this->localid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_localid());
  }

  // string ossObjectName = 8;
  if (this->ossobjectname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ossobjectname());
  }

  // string messageId = 10;
  if (this->messageid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messageid());
  }

  // string binaryBase64 = 11;
  if (this->binarybase64().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_binarybase64());
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  // .ChatPb.MsgType type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint64 msgTime = 6;
  if (this->msgtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msgtime());
  }

  // uint64 fileSize = 9;
  if (this->filesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_filesize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatPb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatPb.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatPb.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatPb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chatid().size() > 0) {

    chatid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chatid_);
  }
  if (from.fromuserid().size() > 0) {

    fromuserid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fromuserid_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.localid().size() > 0) {

    localid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.localid_);
  }
  if (from.ossobjectname().size() > 0) {

    ossobjectname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ossobjectname_);
  }
  if (from.messageid().size() > 0) {

    messageid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.messageid_);
  }
  if (from.binarybase64().size() > 0) {

    binarybase64_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.binarybase64_);
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.msgtime() != 0) {
    _internal_set_msgtime(from._internal_msgtime());
  }
  if (from.filesize() != 0) {
    _internal_set_filesize(from._internal_filesize());
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatPb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatPb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chatid_.Swap(&other->chatid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fromuserid_.Swap(&other->fromuserid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  localid_.Swap(&other->localid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ossobjectname_.Swap(&other->ossobjectname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  messageid_.Swap(&other->messageid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  binarybase64_.Swap(&other->binarybase64_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_, other->duration_);
  swap(type_, other->type_);
  swap(msgtime_, other->msgtime_);
  swap(filesize_, other->filesize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgAck::InitAsDefaultInstance() {
}
class MsgAck::_Internal {
 public:
};

MsgAck::MsgAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatPb.MsgAck)
}
MsgAck::MsgAck(const MsgAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatid().empty()) {
    chatid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chatid_);
  }
  fromuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fromuserid().empty()) {
    fromuserid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fromuserid_);
  }
  // @@protoc_insertion_point(copy_constructor:ChatPb.MsgAck)
}

void MsgAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgAck_chat_2emessage_2eproto.base);
  chatid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MsgAck::~MsgAck() {
  // @@protoc_insertion_point(destructor:ChatPb.MsgAck)
  SharedDtor();
}

void MsgAck::SharedDtor() {
  chatid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromuserid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgAck& MsgAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgAck_chat_2emessage_2eproto.base);
  return *internal_default_instance();
}


void MsgAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatPb.MsgAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chatid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromuserid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MsgAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string chatId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chatid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatPb.MsgAck.chatId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fromUserId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fromuserid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatPb.MsgAck.fromUserId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatPb.MsgAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chatId = 1;
  if (this->chatid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chatid().data(), static_cast<int>(this->_internal_chatid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatPb.MsgAck.chatId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chatid(), target);
  }

  // string fromUserId = 2;
  if (this->fromuserid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fromuserid().data(), static_cast<int>(this->_internal_fromuserid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatPb.MsgAck.fromUserId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fromuserid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatPb.MsgAck)
  return target;
}

size_t MsgAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatPb.MsgAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chatId = 1;
  if (this->chatid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatid());
  }

  // string fromUserId = 2;
  if (this->fromuserid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromuserid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatPb.MsgAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatPb.MsgAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatPb.MsgAck)
    MergeFrom(*source);
  }
}

void MsgAck::MergeFrom(const MsgAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatPb.MsgAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chatid().size() > 0) {

    chatid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chatid_);
  }
  if (from.fromuserid().size() > 0) {

    fromuserid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fromuserid_);
  }
}

void MsgAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatPb.MsgAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAck::CopyFrom(const MsgAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatPb.MsgAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAck::IsInitialized() const {
  return true;
}

void MsgAck::InternalSwap(MsgAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chatid_.Swap(&other->chatid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fromuserid_.Swap(&other->fromuserid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnreceivedMessage::InitAsDefaultInstance() {
}
class UnreceivedMessage::_Internal {
 public:
};

UnreceivedMessage::UnreceivedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatPb.UnreceivedMessage)
}
UnreceivedMessage::UnreceivedMessage(const UnreceivedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:ChatPb.UnreceivedMessage)
}

void UnreceivedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnreceivedMessage_chat_2emessage_2eproto.base);
  count_ = 0;
}

UnreceivedMessage::~UnreceivedMessage() {
  // @@protoc_insertion_point(destructor:ChatPb.UnreceivedMessage)
  SharedDtor();
}

void UnreceivedMessage::SharedDtor() {
}

void UnreceivedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnreceivedMessage& UnreceivedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnreceivedMessage_chat_2emessage_2eproto.base);
  return *internal_default_instance();
}


void UnreceivedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatPb.UnreceivedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  count_ = 0;
  _internal_metadata_.Clear();
}

const char* UnreceivedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ChatPb.Message msgs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnreceivedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatPb.UnreceivedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // repeated .ChatPb.Message msgs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_msgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatPb.UnreceivedMessage)
  return target;
}

size_t UnreceivedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatPb.UnreceivedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatPb.Message msgs = 2;
  total_size += 1UL * this->_internal_msgs_size();
  for (const auto& msg : this->msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnreceivedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatPb.UnreceivedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnreceivedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnreceivedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatPb.UnreceivedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatPb.UnreceivedMessage)
    MergeFrom(*source);
  }
}

void UnreceivedMessage::MergeFrom(const UnreceivedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatPb.UnreceivedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void UnreceivedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatPb.UnreceivedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnreceivedMessage::CopyFrom(const UnreceivedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatPb.UnreceivedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnreceivedMessage::IsInitialized() const {
  return true;
}

void UnreceivedMessage::InternalSwap(UnreceivedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnreceivedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void openReceivedMessageREQ::InitAsDefaultInstance() {
}
class openReceivedMessageREQ::_Internal {
 public:
};

openReceivedMessageREQ::openReceivedMessageREQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatPb.openReceivedMessageREQ)
}
openReceivedMessageREQ::openReceivedMessageREQ(const openReceivedMessageREQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cliendid_, &from.cliendid_,
    static_cast<size_t>(reinterpret_cast<char*>(&on_) -
    reinterpret_cast<char*>(&cliendid_)) + sizeof(on_));
  // @@protoc_insertion_point(copy_constructor:ChatPb.openReceivedMessageREQ)
}

void openReceivedMessageREQ::SharedCtor() {
  ::memset(&cliendid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_) -
      reinterpret_cast<char*>(&cliendid_)) + sizeof(on_));
}

openReceivedMessageREQ::~openReceivedMessageREQ() {
  // @@protoc_insertion_point(destructor:ChatPb.openReceivedMessageREQ)
  SharedDtor();
}

void openReceivedMessageREQ::SharedDtor() {
}

void openReceivedMessageREQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const openReceivedMessageREQ& openReceivedMessageREQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_openReceivedMessageREQ_chat_2emessage_2eproto.base);
  return *internal_default_instance();
}


void openReceivedMessageREQ::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatPb.openReceivedMessageREQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cliendid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_) -
      reinterpret_cast<char*>(&cliendid_)) + sizeof(on_));
  _internal_metadata_.Clear();
}

const char* openReceivedMessageREQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cliendId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cliendid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* openReceivedMessageREQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatPb.openReceivedMessageREQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_on(), target);
  }

  // uint64 cliendId = 2;
  if (this->cliendid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_cliendid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatPb.openReceivedMessageREQ)
  return target;
}

size_t openReceivedMessageREQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatPb.openReceivedMessageREQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cliendId = 2;
  if (this->cliendid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cliendid());
  }

  // bool on = 1;
  if (this->on() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void openReceivedMessageREQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatPb.openReceivedMessageREQ)
  GOOGLE_DCHECK_NE(&from, this);
  const openReceivedMessageREQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<openReceivedMessageREQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatPb.openReceivedMessageREQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatPb.openReceivedMessageREQ)
    MergeFrom(*source);
  }
}

void openReceivedMessageREQ::MergeFrom(const openReceivedMessageREQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatPb.openReceivedMessageREQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cliendid() != 0) {
    _internal_set_cliendid(from._internal_cliendid());
  }
  if (from.on() != 0) {
    _internal_set_on(from._internal_on());
  }
}

void openReceivedMessageREQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatPb.openReceivedMessageREQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void openReceivedMessageREQ::CopyFrom(const openReceivedMessageREQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatPb.openReceivedMessageREQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool openReceivedMessageREQ::IsInitialized() const {
  return true;
}

void openReceivedMessageREQ::InternalSwap(openReceivedMessageREQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cliendid_, other->cliendid_);
  swap(on_, other->on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata openReceivedMessageREQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnreceivedMessageRES::InitAsDefaultInstance() {
}
class UnreceivedMessageRES::_Internal {
 public:
};

UnreceivedMessageRES::UnreceivedMessageRES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatPb.UnreceivedMessageRES)
}
UnreceivedMessageRES::UnreceivedMessageRES(const UnreceivedMessageRES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      unreceivedmessages_(from.unreceivedmessages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cliendid_ = from.cliendid_;
  // @@protoc_insertion_point(copy_constructor:ChatPb.UnreceivedMessageRES)
}

void UnreceivedMessageRES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnreceivedMessageRES_chat_2emessage_2eproto.base);
  cliendid_ = PROTOBUF_ULONGLONG(0);
}

UnreceivedMessageRES::~UnreceivedMessageRES() {
  // @@protoc_insertion_point(destructor:ChatPb.UnreceivedMessageRES)
  SharedDtor();
}

void UnreceivedMessageRES::SharedDtor() {
}

void UnreceivedMessageRES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnreceivedMessageRES& UnreceivedMessageRES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnreceivedMessageRES_chat_2emessage_2eproto.base);
  return *internal_default_instance();
}


void UnreceivedMessageRES::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatPb.UnreceivedMessageRES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unreceivedmessages_.Clear();
  cliendid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* UnreceivedMessageRES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ChatPb.UnreceivedMessage unreceivedMessages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unreceivedmessages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 cliendId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cliendid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnreceivedMessageRES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatPb.UnreceivedMessageRES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChatPb.UnreceivedMessage unreceivedMessages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unreceivedmessages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_unreceivedmessages(i), target, stream);
  }

  // uint64 cliendId = 2;
  if (this->cliendid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_cliendid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatPb.UnreceivedMessageRES)
  return target;
}

size_t UnreceivedMessageRES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatPb.UnreceivedMessageRES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatPb.UnreceivedMessage unreceivedMessages = 1;
  total_size += 1UL * this->_internal_unreceivedmessages_size();
  for (const auto& msg : this->unreceivedmessages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 cliendId = 2;
  if (this->cliendid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cliendid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnreceivedMessageRES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatPb.UnreceivedMessageRES)
  GOOGLE_DCHECK_NE(&from, this);
  const UnreceivedMessageRES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnreceivedMessageRES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatPb.UnreceivedMessageRES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatPb.UnreceivedMessageRES)
    MergeFrom(*source);
  }
}

void UnreceivedMessageRES::MergeFrom(const UnreceivedMessageRES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatPb.UnreceivedMessageRES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unreceivedmessages_.MergeFrom(from.unreceivedmessages_);
  if (from.cliendid() != 0) {
    _internal_set_cliendid(from._internal_cliendid());
  }
}

void UnreceivedMessageRES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatPb.UnreceivedMessageRES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnreceivedMessageRES::CopyFrom(const UnreceivedMessageRES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatPb.UnreceivedMessageRES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnreceivedMessageRES::IsInitialized() const {
  return true;
}

void UnreceivedMessageRES::InternalSwap(UnreceivedMessageRES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  unreceivedmessages_.InternalSwap(&other->unreceivedmessages_);
  swap(cliendid_, other->cliendid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnreceivedMessageRES::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ChatPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatPb::Message* Arena::CreateMaybeMessage< ::ChatPb::Message >(Arena* arena) {
  return Arena::CreateInternal< ::ChatPb::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatPb::MsgAck* Arena::CreateMaybeMessage< ::ChatPb::MsgAck >(Arena* arena) {
  return Arena::CreateInternal< ::ChatPb::MsgAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatPb::UnreceivedMessage* Arena::CreateMaybeMessage< ::ChatPb::UnreceivedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ChatPb::UnreceivedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatPb::openReceivedMessageREQ* Arena::CreateMaybeMessage< ::ChatPb::openReceivedMessageREQ >(Arena* arena) {
  return Arena::CreateInternal< ::ChatPb::openReceivedMessageREQ >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatPb::UnreceivedMessageRES* Arena::CreateMaybeMessage< ::ChatPb::UnreceivedMessageRES >(Arena* arena) {
  return Arena::CreateInternal< ::ChatPb::UnreceivedMessageRES >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
