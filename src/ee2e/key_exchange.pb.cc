// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key_exchange.proto

#include "key_exchange.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_key_5fexchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ciphertext_key_5fexchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_key_5fexchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyInfo_key_5fexchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_key_5fexchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Token_key_5fexchange_2eproto;
namespace ee2e {
class KeyExchangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyExchangeRequest> _instance;
} _KeyExchangeRequest_default_instance_;
class EncryptedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncryptedRequest> _instance;
} _EncryptedRequest_default_instance_;
class KeyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyInfo> _instance;
} _KeyInfo_default_instance_;
class TokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Token> _instance;
} _Token_default_instance_;
class CiphertextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ciphertext> _instance;
} _Ciphertext_default_instance_;
}  // namespace ee2e
static void InitDefaultsscc_info_Ciphertext_key_5fexchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ee2e::_Ciphertext_default_instance_;
    new (ptr) ::ee2e::Ciphertext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ee2e::Ciphertext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ciphertext_key_5fexchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ciphertext_key_5fexchange_2eproto}, {}};

static void InitDefaultsscc_info_EncryptedRequest_key_5fexchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ee2e::_EncryptedRequest_default_instance_;
    new (ptr) ::ee2e::EncryptedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ee2e::EncryptedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EncryptedRequest_key_5fexchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EncryptedRequest_key_5fexchange_2eproto}, {
      &scc_info_Token_key_5fexchange_2eproto.base,
      &scc_info_Ciphertext_key_5fexchange_2eproto.base,}};

static void InitDefaultsscc_info_KeyExchangeRequest_key_5fexchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ee2e::_KeyExchangeRequest_default_instance_;
    new (ptr) ::ee2e::KeyExchangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ee2e::KeyExchangeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyExchangeRequest_key_5fexchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeyExchangeRequest_key_5fexchange_2eproto}, {
      &scc_info_KeyInfo_key_5fexchange_2eproto.base,}};

static void InitDefaultsscc_info_KeyInfo_key_5fexchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ee2e::_KeyInfo_default_instance_;
    new (ptr) ::ee2e::KeyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ee2e::KeyInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyInfo_key_5fexchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyInfo_key_5fexchange_2eproto}, {}};

static void InitDefaultsscc_info_Token_key_5fexchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ee2e::_Token_default_instance_;
    new (ptr) ::ee2e::Token();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ee2e::Token::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Token_key_5fexchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Token_key_5fexchange_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_key_5fexchange_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_key_5fexchange_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_key_5fexchange_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_key_5fexchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ee2e::KeyExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ee2e::KeyExchangeRequest, key_exchange_type_),
  PROTOBUF_FIELD_OFFSET(::ee2e::KeyExchangeRequest, key_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ee2e::EncryptedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ee2e::EncryptedRequest, token_),
  PROTOBUF_FIELD_OFFSET(::ee2e::EncryptedRequest, ciphertext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ee2e::KeyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ee2e::KeyInfo, salt_32bytes_),
  PROTOBUF_FIELD_OFFSET(::ee2e::KeyInfo, ec_public_key_65bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ee2e::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ee2e::Token, salt_3bytes_),
  PROTOBUF_FIELD_OFFSET(::ee2e::Token, hmac_3bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ee2e::Ciphertext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ee2e::Ciphertext, cipher_version_),
  PROTOBUF_FIELD_OFFSET(::ee2e::Ciphertext, aes_iv_12bytes_),
  PROTOBUF_FIELD_OFFSET(::ee2e::Ciphertext, ciphertext_nbytes_),
  PROTOBUF_FIELD_OFFSET(::ee2e::Ciphertext, aes_tag_16bytes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ee2e::KeyExchangeRequest)},
  { 7, -1, sizeof(::ee2e::EncryptedRequest)},
  { 14, -1, sizeof(::ee2e::KeyInfo)},
  { 21, -1, sizeof(::ee2e::Token)},
  { 28, -1, sizeof(::ee2e::Ciphertext)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ee2e::_KeyExchangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ee2e::_EncryptedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ee2e::_KeyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ee2e::_Token_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ee2e::_Ciphertext_default_instance_),
};

const char descriptor_table_protodef_key_5fexchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022key_exchange.proto\022\004ee2e\"g\n\022KeyExchang"
  "eRequest\0220\n\021key_exchange_type\030\001 \001(\0162\025.ee"
  "2e.KeyExchangeType\022\037\n\010key_info\030\002 \001(\0132\r.e"
  "e2e.KeyInfo\"T\n\020EncryptedRequest\022\032\n\005token"
  "\030\001 \001(\0132\013.ee2e.Token\022$\n\nciphertext\030\002 \001(\0132"
  "\020.ee2e.Ciphertext\">\n\007KeyInfo\022\024\n\014salt_32b"
  "ytes\030\001 \001(\t\022\035\n\025ec_public_key_65bytes\030\002 \001("
  "\t\"1\n\005Token\022\023\n\013salt_3bytes\030\001 \001(\t\022\023\n\013hmac_"
  "3bytes\030\002 \001(\t\"p\n\nCiphertext\022\026\n\016cipher_ver"
  "sion\030\001 \001(\005\022\026\n\016aes_iv_12bytes\030\002 \001(\t\022\031\n\021ci"
  "phertext_nbytes\030\003 \001(\t\022\027\n\017aes_tag_16bytes"
  "\030\004 \001(\t*a\n\017KeyExchangeType\022\030\n\024UNKNOWN_REQ"
  "UEST_TYPE\020\000\022\031\n\025KEY_EXCHANGE_INITIATE\020\001\022\031"
  "\n\025KEY_EXCHANGE_FINALIZE\020\002*:\n\007MESSAGE\022\013\n\007"
  "UNKNOWN\020\000\022\020\n\010INITIATE\020\261\357\361\334\003\022\020\n\010FINALIZE\020"
  "\301\321\335\271\007b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_key_5fexchange_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_key_5fexchange_2eproto_sccs[5] = {
  &scc_info_Ciphertext_key_5fexchange_2eproto.base,
  &scc_info_EncryptedRequest_key_5fexchange_2eproto.base,
  &scc_info_KeyExchangeRequest_key_5fexchange_2eproto.base,
  &scc_info_KeyInfo_key_5fexchange_2eproto.base,
  &scc_info_Token_key_5fexchange_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_key_5fexchange_2eproto_once;
static bool descriptor_table_key_5fexchange_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_key_5fexchange_2eproto = {
  &descriptor_table_key_5fexchange_2eproto_initialized, descriptor_table_protodef_key_5fexchange_2eproto, "key_exchange.proto", 613,
  &descriptor_table_key_5fexchange_2eproto_once, descriptor_table_key_5fexchange_2eproto_sccs, descriptor_table_key_5fexchange_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_key_5fexchange_2eproto::offsets,
  file_level_metadata_key_5fexchange_2eproto, 5, file_level_enum_descriptors_key_5fexchange_2eproto, file_level_service_descriptors_key_5fexchange_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_key_5fexchange_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_key_5fexchange_2eproto)), true);
namespace ee2e {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyExchangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_key_5fexchange_2eproto);
  return file_level_enum_descriptors_key_5fexchange_2eproto[0];
}
bool KeyExchangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MESSAGE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_key_5fexchange_2eproto);
  return file_level_enum_descriptors_key_5fexchange_2eproto[1];
}
bool MESSAGE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1000110001:
    case 2000120001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void KeyExchangeRequest::InitAsDefaultInstance() {
  ::ee2e::_KeyExchangeRequest_default_instance_._instance.get_mutable()->key_info_ = const_cast< ::ee2e::KeyInfo*>(
      ::ee2e::KeyInfo::internal_default_instance());
}
class KeyExchangeRequest::_Internal {
 public:
  static const ::ee2e::KeyInfo& key_info(const KeyExchangeRequest* msg);
};

const ::ee2e::KeyInfo&
KeyExchangeRequest::_Internal::key_info(const KeyExchangeRequest* msg) {
  return *msg->key_info_;
}
KeyExchangeRequest::KeyExchangeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ee2e.KeyExchangeRequest)
}
KeyExchangeRequest::KeyExchangeRequest(const KeyExchangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_key_info()) {
    key_info_ = new ::ee2e::KeyInfo(*from.key_info_);
  } else {
    key_info_ = nullptr;
  }
  key_exchange_type_ = from.key_exchange_type_;
  // @@protoc_insertion_point(copy_constructor:ee2e.KeyExchangeRequest)
}

void KeyExchangeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyExchangeRequest_key_5fexchange_2eproto.base);
  ::memset(&key_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_exchange_type_) -
      reinterpret_cast<char*>(&key_info_)) + sizeof(key_exchange_type_));
}

KeyExchangeRequest::~KeyExchangeRequest() {
  // @@protoc_insertion_point(destructor:ee2e.KeyExchangeRequest)
  SharedDtor();
}

void KeyExchangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete key_info_;
}

void KeyExchangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyExchangeRequest& KeyExchangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyExchangeRequest_key_5fexchange_2eproto.base);
  return *internal_default_instance();
}


void KeyExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ee2e.KeyExchangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && key_info_ != nullptr) {
    delete key_info_;
  }
  key_info_ = nullptr;
  key_exchange_type_ = 0;
  _internal_metadata_.Clear();
}

const char* KeyExchangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ee2e.KeyExchangeType key_exchange_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_key_exchange_type(static_cast<::ee2e::KeyExchangeType>(val));
        } else goto handle_unusual;
        continue;
      // .ee2e.KeyInfo key_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyExchangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ee2e.KeyExchangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ee2e.KeyExchangeType key_exchange_type = 1;
  if (this->key_exchange_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_key_exchange_type(), target);
  }

  // .ee2e.KeyInfo key_info = 2;
  if (this->has_key_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ee2e.KeyExchangeRequest)
  return target;
}

size_t KeyExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ee2e.KeyExchangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ee2e.KeyInfo key_info = 2;
  if (this->has_key_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_info_);
  }

  // .ee2e.KeyExchangeType key_exchange_type = 1;
  if (this->key_exchange_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_key_exchange_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyExchangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ee2e.KeyExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyExchangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyExchangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ee2e.KeyExchangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ee2e.KeyExchangeRequest)
    MergeFrom(*source);
  }
}

void KeyExchangeRequest::MergeFrom(const KeyExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ee2e.KeyExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key_info()) {
    _internal_mutable_key_info()->::ee2e::KeyInfo::MergeFrom(from._internal_key_info());
  }
  if (from.key_exchange_type() != 0) {
    _internal_set_key_exchange_type(from._internal_key_exchange_type());
  }
}

void KeyExchangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ee2e.KeyExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyExchangeRequest::CopyFrom(const KeyExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ee2e.KeyExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchangeRequest::IsInitialized() const {
  return true;
}

void KeyExchangeRequest::InternalSwap(KeyExchangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(key_info_, other->key_info_);
  swap(key_exchange_type_, other->key_exchange_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyExchangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EncryptedRequest::InitAsDefaultInstance() {
  ::ee2e::_EncryptedRequest_default_instance_._instance.get_mutable()->token_ = const_cast< ::ee2e::Token*>(
      ::ee2e::Token::internal_default_instance());
  ::ee2e::_EncryptedRequest_default_instance_._instance.get_mutable()->ciphertext_ = const_cast< ::ee2e::Ciphertext*>(
      ::ee2e::Ciphertext::internal_default_instance());
}
class EncryptedRequest::_Internal {
 public:
  static const ::ee2e::Token& token(const EncryptedRequest* msg);
  static const ::ee2e::Ciphertext& ciphertext(const EncryptedRequest* msg);
};

const ::ee2e::Token&
EncryptedRequest::_Internal::token(const EncryptedRequest* msg) {
  return *msg->token_;
}
const ::ee2e::Ciphertext&
EncryptedRequest::_Internal::ciphertext(const EncryptedRequest* msg) {
  return *msg->ciphertext_;
}
EncryptedRequest::EncryptedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ee2e.EncryptedRequest)
}
EncryptedRequest::EncryptedRequest(const EncryptedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_token()) {
    token_ = new ::ee2e::Token(*from.token_);
  } else {
    token_ = nullptr;
  }
  if (from._internal_has_ciphertext()) {
    ciphertext_ = new ::ee2e::Ciphertext(*from.ciphertext_);
  } else {
    ciphertext_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ee2e.EncryptedRequest)
}

void EncryptedRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EncryptedRequest_key_5fexchange_2eproto.base);
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ciphertext_) -
      reinterpret_cast<char*>(&token_)) + sizeof(ciphertext_));
}

EncryptedRequest::~EncryptedRequest() {
  // @@protoc_insertion_point(destructor:ee2e.EncryptedRequest)
  SharedDtor();
}

void EncryptedRequest::SharedDtor() {
  if (this != internal_default_instance()) delete token_;
  if (this != internal_default_instance()) delete ciphertext_;
}

void EncryptedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncryptedRequest& EncryptedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncryptedRequest_key_5fexchange_2eproto.base);
  return *internal_default_instance();
}


void EncryptedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ee2e.EncryptedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ciphertext_ != nullptr) {
    delete ciphertext_;
  }
  ciphertext_ = nullptr;
  _internal_metadata_.Clear();
}

const char* EncryptedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ee2e.Token token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ee2e.Ciphertext ciphertext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ciphertext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncryptedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ee2e.EncryptedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ee2e.Token token = 1;
  if (this->has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::token(this), target, stream);
  }

  // .ee2e.Ciphertext ciphertext = 2;
  if (this->has_ciphertext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ciphertext(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ee2e.EncryptedRequest)
  return target;
}

size_t EncryptedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ee2e.EncryptedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ee2e.Token token = 1;
  if (this->has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);
  }

  // .ee2e.Ciphertext ciphertext = 2;
  if (this->has_ciphertext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ciphertext_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ee2e.EncryptedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EncryptedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncryptedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ee2e.EncryptedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ee2e.EncryptedRequest)
    MergeFrom(*source);
  }
}

void EncryptedRequest::MergeFrom(const EncryptedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ee2e.EncryptedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_token()) {
    _internal_mutable_token()->::ee2e::Token::MergeFrom(from._internal_token());
  }
  if (from.has_ciphertext()) {
    _internal_mutable_ciphertext()->::ee2e::Ciphertext::MergeFrom(from._internal_ciphertext());
  }
}

void EncryptedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ee2e.EncryptedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptedRequest::CopyFrom(const EncryptedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ee2e.EncryptedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedRequest::IsInitialized() const {
  return true;
}

void EncryptedRequest::InternalSwap(EncryptedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(token_, other->token_);
  swap(ciphertext_, other->ciphertext_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyInfo::InitAsDefaultInstance() {
}
class KeyInfo::_Internal {
 public:
};

KeyInfo::KeyInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ee2e.KeyInfo)
}
KeyInfo::KeyInfo(const KeyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  salt_32bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_salt_32bytes().empty()) {
    salt_32bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt_32bytes_);
  }
  ec_public_key_65bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ec_public_key_65bytes().empty()) {
    ec_public_key_65bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ec_public_key_65bytes_);
  }
  // @@protoc_insertion_point(copy_constructor:ee2e.KeyInfo)
}

void KeyInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyInfo_key_5fexchange_2eproto.base);
  salt_32bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ec_public_key_65bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyInfo::~KeyInfo() {
  // @@protoc_insertion_point(destructor:ee2e.KeyInfo)
  SharedDtor();
}

void KeyInfo::SharedDtor() {
  salt_32bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ec_public_key_65bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyInfo& KeyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyInfo_key_5fexchange_2eproto.base);
  return *internal_default_instance();
}


void KeyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ee2e.KeyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  salt_32bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ec_public_key_65bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* KeyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string salt_32bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_salt_32bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ee2e.KeyInfo.salt_32bytes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ec_public_key_65bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ec_public_key_65bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ee2e.KeyInfo.ec_public_key_65bytes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ee2e.KeyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string salt_32bytes = 1;
  if (this->salt_32bytes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_salt_32bytes().data(), static_cast<int>(this->_internal_salt_32bytes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ee2e.KeyInfo.salt_32bytes");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_salt_32bytes(), target);
  }

  // string ec_public_key_65bytes = 2;
  if (this->ec_public_key_65bytes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ec_public_key_65bytes().data(), static_cast<int>(this->_internal_ec_public_key_65bytes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ee2e.KeyInfo.ec_public_key_65bytes");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ec_public_key_65bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ee2e.KeyInfo)
  return target;
}

size_t KeyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ee2e.KeyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string salt_32bytes = 1;
  if (this->salt_32bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_salt_32bytes());
  }

  // string ec_public_key_65bytes = 2;
  if (this->ec_public_key_65bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ec_public_key_65bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ee2e.KeyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ee2e.KeyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ee2e.KeyInfo)
    MergeFrom(*source);
  }
}

void KeyInfo::MergeFrom(const KeyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ee2e.KeyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.salt_32bytes().size() > 0) {

    salt_32bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt_32bytes_);
  }
  if (from.ec_public_key_65bytes().size() > 0) {

    ec_public_key_65bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ec_public_key_65bytes_);
  }
}

void KeyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ee2e.KeyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyInfo::CopyFrom(const KeyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ee2e.KeyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyInfo::IsInitialized() const {
  return true;
}

void KeyInfo::InternalSwap(KeyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  salt_32bytes_.Swap(&other->salt_32bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ec_public_key_65bytes_.Swap(&other->ec_public_key_65bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Token::InitAsDefaultInstance() {
}
class Token::_Internal {
 public:
};

Token::Token()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ee2e.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  salt_3bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_salt_3bytes().empty()) {
    salt_3bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt_3bytes_);
  }
  hmac_3bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hmac_3bytes().empty()) {
    hmac_3bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hmac_3bytes_);
  }
  // @@protoc_insertion_point(copy_constructor:ee2e.Token)
}

void Token::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Token_key_5fexchange_2eproto.base);
  salt_3bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hmac_3bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:ee2e.Token)
  SharedDtor();
}

void Token::SharedDtor() {
  salt_3bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hmac_3bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Token& Token::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Token_key_5fexchange_2eproto.base);
  return *internal_default_instance();
}


void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:ee2e.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  salt_3bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hmac_3bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Token::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string salt_3bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_salt_3bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ee2e.Token.salt_3bytes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hmac_3bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hmac_3bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ee2e.Token.hmac_3bytes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Token::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ee2e.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string salt_3bytes = 1;
  if (this->salt_3bytes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_salt_3bytes().data(), static_cast<int>(this->_internal_salt_3bytes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ee2e.Token.salt_3bytes");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_salt_3bytes(), target);
  }

  // string hmac_3bytes = 2;
  if (this->hmac_3bytes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hmac_3bytes().data(), static_cast<int>(this->_internal_hmac_3bytes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ee2e.Token.hmac_3bytes");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hmac_3bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ee2e.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ee2e.Token)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string salt_3bytes = 1;
  if (this->salt_3bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_salt_3bytes());
  }

  // string hmac_3bytes = 2;
  if (this->hmac_3bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hmac_3bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Token::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ee2e.Token)
  GOOGLE_DCHECK_NE(&from, this);
  const Token* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Token>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ee2e.Token)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ee2e.Token)
    MergeFrom(*source);
  }
}

void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ee2e.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.salt_3bytes().size() > 0) {

    salt_3bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt_3bytes_);
  }
  if (from.hmac_3bytes().size() > 0) {

    hmac_3bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hmac_3bytes_);
  }
}

void Token::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ee2e.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ee2e.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  salt_3bytes_.Swap(&other->salt_3bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hmac_3bytes_.Swap(&other->hmac_3bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ciphertext::InitAsDefaultInstance() {
}
class Ciphertext::_Internal {
 public:
};

Ciphertext::Ciphertext()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ee2e.Ciphertext)
}
Ciphertext::Ciphertext(const Ciphertext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aes_iv_12bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aes_iv_12bytes().empty()) {
    aes_iv_12bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aes_iv_12bytes_);
  }
  ciphertext_nbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ciphertext_nbytes().empty()) {
    ciphertext_nbytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ciphertext_nbytes_);
  }
  aes_tag_16bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aes_tag_16bytes().empty()) {
    aes_tag_16bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aes_tag_16bytes_);
  }
  cipher_version_ = from.cipher_version_;
  // @@protoc_insertion_point(copy_constructor:ee2e.Ciphertext)
}

void Ciphertext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ciphertext_key_5fexchange_2eproto.base);
  aes_iv_12bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ciphertext_nbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aes_tag_16bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cipher_version_ = 0;
}

Ciphertext::~Ciphertext() {
  // @@protoc_insertion_point(destructor:ee2e.Ciphertext)
  SharedDtor();
}

void Ciphertext::SharedDtor() {
  aes_iv_12bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ciphertext_nbytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aes_tag_16bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ciphertext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ciphertext& Ciphertext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ciphertext_key_5fexchange_2eproto.base);
  return *internal_default_instance();
}


void Ciphertext::Clear() {
// @@protoc_insertion_point(message_clear_start:ee2e.Ciphertext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aes_iv_12bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ciphertext_nbytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aes_tag_16bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cipher_version_ = 0;
  _internal_metadata_.Clear();
}

const char* Ciphertext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cipher_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cipher_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aes_iv_12bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_aes_iv_12bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ee2e.Ciphertext.aes_iv_12bytes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ciphertext_nbytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ciphertext_nbytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ee2e.Ciphertext.ciphertext_nbytes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aes_tag_16bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_aes_tag_16bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ee2e.Ciphertext.aes_tag_16bytes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ciphertext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ee2e.Ciphertext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cipher_version = 1;
  if (this->cipher_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cipher_version(), target);
  }

  // string aes_iv_12bytes = 2;
  if (this->aes_iv_12bytes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aes_iv_12bytes().data(), static_cast<int>(this->_internal_aes_iv_12bytes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ee2e.Ciphertext.aes_iv_12bytes");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_aes_iv_12bytes(), target);
  }

  // string ciphertext_nbytes = 3;
  if (this->ciphertext_nbytes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ciphertext_nbytes().data(), static_cast<int>(this->_internal_ciphertext_nbytes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ee2e.Ciphertext.ciphertext_nbytes");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ciphertext_nbytes(), target);
  }

  // string aes_tag_16bytes = 4;
  if (this->aes_tag_16bytes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aes_tag_16bytes().data(), static_cast<int>(this->_internal_aes_tag_16bytes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ee2e.Ciphertext.aes_tag_16bytes");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_aes_tag_16bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ee2e.Ciphertext)
  return target;
}

size_t Ciphertext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ee2e.Ciphertext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string aes_iv_12bytes = 2;
  if (this->aes_iv_12bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aes_iv_12bytes());
  }

  // string ciphertext_nbytes = 3;
  if (this->ciphertext_nbytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ciphertext_nbytes());
  }

  // string aes_tag_16bytes = 4;
  if (this->aes_tag_16bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aes_tag_16bytes());
  }

  // int32 cipher_version = 1;
  if (this->cipher_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cipher_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ciphertext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ee2e.Ciphertext)
  GOOGLE_DCHECK_NE(&from, this);
  const Ciphertext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ciphertext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ee2e.Ciphertext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ee2e.Ciphertext)
    MergeFrom(*source);
  }
}

void Ciphertext::MergeFrom(const Ciphertext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ee2e.Ciphertext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aes_iv_12bytes().size() > 0) {

    aes_iv_12bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aes_iv_12bytes_);
  }
  if (from.ciphertext_nbytes().size() > 0) {

    ciphertext_nbytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ciphertext_nbytes_);
  }
  if (from.aes_tag_16bytes().size() > 0) {

    aes_tag_16bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aes_tag_16bytes_);
  }
  if (from.cipher_version() != 0) {
    _internal_set_cipher_version(from._internal_cipher_version());
  }
}

void Ciphertext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ee2e.Ciphertext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ciphertext::CopyFrom(const Ciphertext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ee2e.Ciphertext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ciphertext::IsInitialized() const {
  return true;
}

void Ciphertext::InternalSwap(Ciphertext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aes_iv_12bytes_.Swap(&other->aes_iv_12bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ciphertext_nbytes_.Swap(&other->ciphertext_nbytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  aes_tag_16bytes_.Swap(&other->aes_tag_16bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cipher_version_, other->cipher_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ciphertext::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ee2e
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ee2e::KeyExchangeRequest* Arena::CreateMaybeMessage< ::ee2e::KeyExchangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ee2e::KeyExchangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ee2e::EncryptedRequest* Arena::CreateMaybeMessage< ::ee2e::EncryptedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ee2e::EncryptedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ee2e::KeyInfo* Arena::CreateMaybeMessage< ::ee2e::KeyInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ee2e::KeyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ee2e::Token* Arena::CreateMaybeMessage< ::ee2e::Token >(Arena* arena) {
  return Arena::CreateInternal< ::ee2e::Token >(arena);
}
template<> PROTOBUF_NOINLINE ::ee2e::Ciphertext* Arena::CreateMaybeMessage< ::ee2e::Ciphertext >(Arena* arena) {
  return Arena::CreateInternal< ::ee2e::Ciphertext >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
