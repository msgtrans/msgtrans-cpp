// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key_exchange.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_key_5fexchange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_key_5fexchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_key_5fexchange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_key_5fexchange_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_key_5fexchange_2eproto;
namespace ee2e {
class Ciphertext;
class CiphertextDefaultTypeInternal;
extern CiphertextDefaultTypeInternal _Ciphertext_default_instance_;
class EncryptedRequest;
class EncryptedRequestDefaultTypeInternal;
extern EncryptedRequestDefaultTypeInternal _EncryptedRequest_default_instance_;
class KeyExchangeRequest;
class KeyExchangeRequestDefaultTypeInternal;
extern KeyExchangeRequestDefaultTypeInternal _KeyExchangeRequest_default_instance_;
class KeyInfo;
class KeyInfoDefaultTypeInternal;
extern KeyInfoDefaultTypeInternal _KeyInfo_default_instance_;
class Token;
class TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace ee2e
PROTOBUF_NAMESPACE_OPEN
template<> ::ee2e::Ciphertext* Arena::CreateMaybeMessage<::ee2e::Ciphertext>(Arena*);
template<> ::ee2e::EncryptedRequest* Arena::CreateMaybeMessage<::ee2e::EncryptedRequest>(Arena*);
template<> ::ee2e::KeyExchangeRequest* Arena::CreateMaybeMessage<::ee2e::KeyExchangeRequest>(Arena*);
template<> ::ee2e::KeyInfo* Arena::CreateMaybeMessage<::ee2e::KeyInfo>(Arena*);
template<> ::ee2e::Token* Arena::CreateMaybeMessage<::ee2e::Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ee2e {

enum KeyExchangeType : int {
  UNKNOWN_REQUEST_TYPE = 0,
  KEY_EXCHANGE_INITIATE = 1,
  KEY_EXCHANGE_FINALIZE = 2,
  KeyExchangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KeyExchangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KeyExchangeType_IsValid(int value);
constexpr KeyExchangeType KeyExchangeType_MIN = UNKNOWN_REQUEST_TYPE;
constexpr KeyExchangeType KeyExchangeType_MAX = KEY_EXCHANGE_FINALIZE;
constexpr int KeyExchangeType_ARRAYSIZE = KeyExchangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyExchangeType_descriptor();
template<typename T>
inline const std::string& KeyExchangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyExchangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyExchangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeyExchangeType_descriptor(), enum_t_value);
}
inline bool KeyExchangeType_Parse(
    const std::string& name, KeyExchangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeyExchangeType>(
    KeyExchangeType_descriptor(), name, value);
}
enum MESSAGE : int {
  UNKNOWN = 0,
  INITIATE = 1000110001,
  FINALIZE = 2000120001,
  MESSAGE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MESSAGE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MESSAGE_IsValid(int value);
constexpr MESSAGE MESSAGE_MIN = UNKNOWN;
constexpr MESSAGE MESSAGE_MAX = FINALIZE;
constexpr int MESSAGE_ARRAYSIZE = MESSAGE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MESSAGE_descriptor();
template<typename T>
inline const std::string& MESSAGE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MESSAGE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MESSAGE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MESSAGE_descriptor(), enum_t_value);
}
inline bool MESSAGE_Parse(
    const std::string& name, MESSAGE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MESSAGE>(
    MESSAGE_descriptor(), name, value);
}
// ===================================================================

class KeyExchangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ee2e.KeyExchangeRequest) */ {
 public:
  inline KeyExchangeRequest() : KeyExchangeRequest(nullptr) {};
  virtual ~KeyExchangeRequest();

  KeyExchangeRequest(const KeyExchangeRequest& from);
  KeyExchangeRequest(KeyExchangeRequest&& from) noexcept
    : KeyExchangeRequest() {
    *this = ::std::move(from);
  }

  inline KeyExchangeRequest& operator=(const KeyExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyExchangeRequest& operator=(KeyExchangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyExchangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const KeyExchangeRequest*>(
               &_KeyExchangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyExchangeRequest& a, KeyExchangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyExchangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyExchangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyExchangeRequest* New() const final {
    return CreateMaybeMessage<KeyExchangeRequest>(nullptr);
  }

  KeyExchangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyExchangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyExchangeRequest& from);
  void MergeFrom(const KeyExchangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyExchangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ee2e.KeyExchangeRequest";
  }
  protected:
  explicit KeyExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_key_5fexchange_2eproto);
    return ::descriptor_table_key_5fexchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyInfoFieldNumber = 2,
    kKeyExchangeTypeFieldNumber = 1,
  };
  // .ee2e.KeyInfo key_info = 2;
  bool has_key_info() const;
  private:
  bool _internal_has_key_info() const;
  public:
  void clear_key_info();
  const ::ee2e::KeyInfo& key_info() const;
  ::ee2e::KeyInfo* release_key_info();
  ::ee2e::KeyInfo* mutable_key_info();
  void set_allocated_key_info(::ee2e::KeyInfo* key_info);
  private:
  const ::ee2e::KeyInfo& _internal_key_info() const;
  ::ee2e::KeyInfo* _internal_mutable_key_info();
  public:
  void unsafe_arena_set_allocated_key_info(
      ::ee2e::KeyInfo* key_info);
  ::ee2e::KeyInfo* unsafe_arena_release_key_info();

  // .ee2e.KeyExchangeType key_exchange_type = 1;
  void clear_key_exchange_type();
  ::ee2e::KeyExchangeType key_exchange_type() const;
  void set_key_exchange_type(::ee2e::KeyExchangeType value);
  private:
  ::ee2e::KeyExchangeType _internal_key_exchange_type() const;
  void _internal_set_key_exchange_type(::ee2e::KeyExchangeType value);
  public:

  // @@protoc_insertion_point(class_scope:ee2e.KeyExchangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ee2e::KeyInfo* key_info_;
  int key_exchange_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class EncryptedRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ee2e.EncryptedRequest) */ {
 public:
  inline EncryptedRequest() : EncryptedRequest(nullptr) {};
  virtual ~EncryptedRequest();

  EncryptedRequest(const EncryptedRequest& from);
  EncryptedRequest(EncryptedRequest&& from) noexcept
    : EncryptedRequest() {
    *this = ::std::move(from);
  }

  inline EncryptedRequest& operator=(const EncryptedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedRequest& operator=(EncryptedRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptedRequest* internal_default_instance() {
    return reinterpret_cast<const EncryptedRequest*>(
               &_EncryptedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EncryptedRequest& a, EncryptedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptedRequest* New() const final {
    return CreateMaybeMessage<EncryptedRequest>(nullptr);
  }

  EncryptedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptedRequest& from);
  void MergeFrom(const EncryptedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ee2e.EncryptedRequest";
  }
  protected:
  explicit EncryptedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_key_5fexchange_2eproto);
    return ::descriptor_table_key_5fexchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kCiphertextFieldNumber = 2,
  };
  // .ee2e.Token token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::ee2e::Token& token() const;
  ::ee2e::Token* release_token();
  ::ee2e::Token* mutable_token();
  void set_allocated_token(::ee2e::Token* token);
  private:
  const ::ee2e::Token& _internal_token() const;
  ::ee2e::Token* _internal_mutable_token();
  public:
  void unsafe_arena_set_allocated_token(
      ::ee2e::Token* token);
  ::ee2e::Token* unsafe_arena_release_token();

  // .ee2e.Ciphertext ciphertext = 2;
  bool has_ciphertext() const;
  private:
  bool _internal_has_ciphertext() const;
  public:
  void clear_ciphertext();
  const ::ee2e::Ciphertext& ciphertext() const;
  ::ee2e::Ciphertext* release_ciphertext();
  ::ee2e::Ciphertext* mutable_ciphertext();
  void set_allocated_ciphertext(::ee2e::Ciphertext* ciphertext);
  private:
  const ::ee2e::Ciphertext& _internal_ciphertext() const;
  ::ee2e::Ciphertext* _internal_mutable_ciphertext();
  public:
  void unsafe_arena_set_allocated_ciphertext(
      ::ee2e::Ciphertext* ciphertext);
  ::ee2e::Ciphertext* unsafe_arena_release_ciphertext();

  // @@protoc_insertion_point(class_scope:ee2e.EncryptedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ee2e::Token* token_;
  ::ee2e::Ciphertext* ciphertext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class KeyInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ee2e.KeyInfo) */ {
 public:
  inline KeyInfo() : KeyInfo(nullptr) {};
  virtual ~KeyInfo();

  KeyInfo(const KeyInfo& from);
  KeyInfo(KeyInfo&& from) noexcept
    : KeyInfo() {
    *this = ::std::move(from);
  }

  inline KeyInfo& operator=(const KeyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyInfo& operator=(KeyInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyInfo* internal_default_instance() {
    return reinterpret_cast<const KeyInfo*>(
               &_KeyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeyInfo& a, KeyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyInfo* New() const final {
    return CreateMaybeMessage<KeyInfo>(nullptr);
  }

  KeyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyInfo& from);
  void MergeFrom(const KeyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ee2e.KeyInfo";
  }
  protected:
  explicit KeyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_key_5fexchange_2eproto);
    return ::descriptor_table_key_5fexchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSalt32BytesFieldNumber = 1,
    kEcPublicKey65BytesFieldNumber = 2,
  };
  // string salt_32bytes = 1;
  void clear_salt_32bytes();
  const std::string& salt_32bytes() const;
  void set_salt_32bytes(const std::string& value);
  void set_salt_32bytes(std::string&& value);
  void set_salt_32bytes(const char* value);
  void set_salt_32bytes(const char* value, size_t size);
  std::string* mutable_salt_32bytes();
  std::string* release_salt_32bytes();
  void set_allocated_salt_32bytes(std::string* salt_32bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_salt_32bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_salt_32bytes(
      std::string* salt_32bytes);
  private:
  const std::string& _internal_salt_32bytes() const;
  void _internal_set_salt_32bytes(const std::string& value);
  std::string* _internal_mutable_salt_32bytes();
  public:

  // string ec_public_key_65bytes = 2;
  void clear_ec_public_key_65bytes();
  const std::string& ec_public_key_65bytes() const;
  void set_ec_public_key_65bytes(const std::string& value);
  void set_ec_public_key_65bytes(std::string&& value);
  void set_ec_public_key_65bytes(const char* value);
  void set_ec_public_key_65bytes(const char* value, size_t size);
  std::string* mutable_ec_public_key_65bytes();
  std::string* release_ec_public_key_65bytes();
  void set_allocated_ec_public_key_65bytes(std::string* ec_public_key_65bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ec_public_key_65bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ec_public_key_65bytes(
      std::string* ec_public_key_65bytes);
  private:
  const std::string& _internal_ec_public_key_65bytes() const;
  void _internal_set_ec_public_key_65bytes(const std::string& value);
  std::string* _internal_mutable_ec_public_key_65bytes();
  public:

  // @@protoc_insertion_point(class_scope:ee2e.KeyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt_32bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ec_public_key_65bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class Token PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ee2e.Token) */ {
 public:
  inline Token() : Token(nullptr) {};
  virtual ~Token();

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Token& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Token* New() const final {
    return CreateMaybeMessage<Token>(nullptr);
  }

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ee2e.Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_key_5fexchange_2eproto);
    return ::descriptor_table_key_5fexchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSalt3BytesFieldNumber = 1,
    kHmac3BytesFieldNumber = 2,
  };
  // string salt_3bytes = 1;
  void clear_salt_3bytes();
  const std::string& salt_3bytes() const;
  void set_salt_3bytes(const std::string& value);
  void set_salt_3bytes(std::string&& value);
  void set_salt_3bytes(const char* value);
  void set_salt_3bytes(const char* value, size_t size);
  std::string* mutable_salt_3bytes();
  std::string* release_salt_3bytes();
  void set_allocated_salt_3bytes(std::string* salt_3bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_salt_3bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_salt_3bytes(
      std::string* salt_3bytes);
  private:
  const std::string& _internal_salt_3bytes() const;
  void _internal_set_salt_3bytes(const std::string& value);
  std::string* _internal_mutable_salt_3bytes();
  public:

  // string hmac_3bytes = 2;
  void clear_hmac_3bytes();
  const std::string& hmac_3bytes() const;
  void set_hmac_3bytes(const std::string& value);
  void set_hmac_3bytes(std::string&& value);
  void set_hmac_3bytes(const char* value);
  void set_hmac_3bytes(const char* value, size_t size);
  std::string* mutable_hmac_3bytes();
  std::string* release_hmac_3bytes();
  void set_allocated_hmac_3bytes(std::string* hmac_3bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hmac_3bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hmac_3bytes(
      std::string* hmac_3bytes);
  private:
  const std::string& _internal_hmac_3bytes() const;
  void _internal_set_hmac_3bytes(const std::string& value);
  std::string* _internal_mutable_hmac_3bytes();
  public:

  // @@protoc_insertion_point(class_scope:ee2e.Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt_3bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hmac_3bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class Ciphertext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ee2e.Ciphertext) */ {
 public:
  inline Ciphertext() : Ciphertext(nullptr) {};
  virtual ~Ciphertext();

  Ciphertext(const Ciphertext& from);
  Ciphertext(Ciphertext&& from) noexcept
    : Ciphertext() {
    *this = ::std::move(from);
  }

  inline Ciphertext& operator=(const Ciphertext& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ciphertext& operator=(Ciphertext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ciphertext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ciphertext* internal_default_instance() {
    return reinterpret_cast<const Ciphertext*>(
               &_Ciphertext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Ciphertext& a, Ciphertext& b) {
    a.Swap(&b);
  }
  inline void Swap(Ciphertext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ciphertext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ciphertext* New() const final {
    return CreateMaybeMessage<Ciphertext>(nullptr);
  }

  Ciphertext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ciphertext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ciphertext& from);
  void MergeFrom(const Ciphertext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ciphertext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ee2e.Ciphertext";
  }
  protected:
  explicit Ciphertext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_key_5fexchange_2eproto);
    return ::descriptor_table_key_5fexchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAesIv12BytesFieldNumber = 2,
    kCiphertextNbytesFieldNumber = 3,
    kAesTag16BytesFieldNumber = 4,
    kCipherVersionFieldNumber = 1,
  };
  // string aes_iv_12bytes = 2;
  void clear_aes_iv_12bytes();
  const std::string& aes_iv_12bytes() const;
  void set_aes_iv_12bytes(const std::string& value);
  void set_aes_iv_12bytes(std::string&& value);
  void set_aes_iv_12bytes(const char* value);
  void set_aes_iv_12bytes(const char* value, size_t size);
  std::string* mutable_aes_iv_12bytes();
  std::string* release_aes_iv_12bytes();
  void set_allocated_aes_iv_12bytes(std::string* aes_iv_12bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_aes_iv_12bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_aes_iv_12bytes(
      std::string* aes_iv_12bytes);
  private:
  const std::string& _internal_aes_iv_12bytes() const;
  void _internal_set_aes_iv_12bytes(const std::string& value);
  std::string* _internal_mutable_aes_iv_12bytes();
  public:

  // string ciphertext_nbytes = 3;
  void clear_ciphertext_nbytes();
  const std::string& ciphertext_nbytes() const;
  void set_ciphertext_nbytes(const std::string& value);
  void set_ciphertext_nbytes(std::string&& value);
  void set_ciphertext_nbytes(const char* value);
  void set_ciphertext_nbytes(const char* value, size_t size);
  std::string* mutable_ciphertext_nbytes();
  std::string* release_ciphertext_nbytes();
  void set_allocated_ciphertext_nbytes(std::string* ciphertext_nbytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ciphertext_nbytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ciphertext_nbytes(
      std::string* ciphertext_nbytes);
  private:
  const std::string& _internal_ciphertext_nbytes() const;
  void _internal_set_ciphertext_nbytes(const std::string& value);
  std::string* _internal_mutable_ciphertext_nbytes();
  public:

  // string aes_tag_16bytes = 4;
  void clear_aes_tag_16bytes();
  const std::string& aes_tag_16bytes() const;
  void set_aes_tag_16bytes(const std::string& value);
  void set_aes_tag_16bytes(std::string&& value);
  void set_aes_tag_16bytes(const char* value);
  void set_aes_tag_16bytes(const char* value, size_t size);
  std::string* mutable_aes_tag_16bytes();
  std::string* release_aes_tag_16bytes();
  void set_allocated_aes_tag_16bytes(std::string* aes_tag_16bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_aes_tag_16bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_aes_tag_16bytes(
      std::string* aes_tag_16bytes);
  private:
  const std::string& _internal_aes_tag_16bytes() const;
  void _internal_set_aes_tag_16bytes(const std::string& value);
  std::string* _internal_mutable_aes_tag_16bytes();
  public:

  // int32 cipher_version = 1;
  void clear_cipher_version();
  ::PROTOBUF_NAMESPACE_ID::int32 cipher_version() const;
  void set_cipher_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cipher_version() const;
  void _internal_set_cipher_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ee2e.Ciphertext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aes_iv_12bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ciphertext_nbytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aes_tag_16bytes_;
  ::PROTOBUF_NAMESPACE_ID::int32 cipher_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyExchangeRequest

// .ee2e.KeyExchangeType key_exchange_type = 1;
inline void KeyExchangeRequest::clear_key_exchange_type() {
  key_exchange_type_ = 0;
}
inline ::ee2e::KeyExchangeType KeyExchangeRequest::_internal_key_exchange_type() const {
  return static_cast< ::ee2e::KeyExchangeType >(key_exchange_type_);
}
inline ::ee2e::KeyExchangeType KeyExchangeRequest::key_exchange_type() const {
  // @@protoc_insertion_point(field_get:ee2e.KeyExchangeRequest.key_exchange_type)
  return _internal_key_exchange_type();
}
inline void KeyExchangeRequest::_internal_set_key_exchange_type(::ee2e::KeyExchangeType value) {
  
  key_exchange_type_ = value;
}
inline void KeyExchangeRequest::set_key_exchange_type(::ee2e::KeyExchangeType value) {
  _internal_set_key_exchange_type(value);
  // @@protoc_insertion_point(field_set:ee2e.KeyExchangeRequest.key_exchange_type)
}

// .ee2e.KeyInfo key_info = 2;
inline bool KeyExchangeRequest::_internal_has_key_info() const {
  return this != internal_default_instance() && key_info_ != nullptr;
}
inline bool KeyExchangeRequest::has_key_info() const {
  return _internal_has_key_info();
}
inline void KeyExchangeRequest::clear_key_info() {
  if (GetArena() == nullptr && key_info_ != nullptr) {
    delete key_info_;
  }
  key_info_ = nullptr;
}
inline const ::ee2e::KeyInfo& KeyExchangeRequest::_internal_key_info() const {
  const ::ee2e::KeyInfo* p = key_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ee2e::KeyInfo*>(
      &::ee2e::_KeyInfo_default_instance_);
}
inline const ::ee2e::KeyInfo& KeyExchangeRequest::key_info() const {
  // @@protoc_insertion_point(field_get:ee2e.KeyExchangeRequest.key_info)
  return _internal_key_info();
}
inline void KeyExchangeRequest::unsafe_arena_set_allocated_key_info(
    ::ee2e::KeyInfo* key_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_info_);
  }
  key_info_ = key_info;
  if (key_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ee2e.KeyExchangeRequest.key_info)
}
inline ::ee2e::KeyInfo* KeyExchangeRequest::release_key_info() {
  auto temp = unsafe_arena_release_key_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ee2e::KeyInfo* KeyExchangeRequest::unsafe_arena_release_key_info() {
  // @@protoc_insertion_point(field_release:ee2e.KeyExchangeRequest.key_info)
  
  ::ee2e::KeyInfo* temp = key_info_;
  key_info_ = nullptr;
  return temp;
}
inline ::ee2e::KeyInfo* KeyExchangeRequest::_internal_mutable_key_info() {
  
  if (key_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ee2e::KeyInfo>(GetArena());
    key_info_ = p;
  }
  return key_info_;
}
inline ::ee2e::KeyInfo* KeyExchangeRequest::mutable_key_info() {
  // @@protoc_insertion_point(field_mutable:ee2e.KeyExchangeRequest.key_info)
  return _internal_mutable_key_info();
}
inline void KeyExchangeRequest::set_allocated_key_info(::ee2e::KeyInfo* key_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_info_;
  }
  if (key_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key_info);
    if (message_arena != submessage_arena) {
      key_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_info, submessage_arena);
    }
    
  } else {
    
  }
  key_info_ = key_info;
  // @@protoc_insertion_point(field_set_allocated:ee2e.KeyExchangeRequest.key_info)
}

// -------------------------------------------------------------------

// EncryptedRequest

// .ee2e.Token token = 1;
inline bool EncryptedRequest::_internal_has_token() const {
  return this != internal_default_instance() && token_ != nullptr;
}
inline bool EncryptedRequest::has_token() const {
  return _internal_has_token();
}
inline void EncryptedRequest::clear_token() {
  if (GetArena() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
}
inline const ::ee2e::Token& EncryptedRequest::_internal_token() const {
  const ::ee2e::Token* p = token_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ee2e::Token*>(
      &::ee2e::_Token_default_instance_);
}
inline const ::ee2e::Token& EncryptedRequest::token() const {
  // @@protoc_insertion_point(field_get:ee2e.EncryptedRequest.token)
  return _internal_token();
}
inline void EncryptedRequest::unsafe_arena_set_allocated_token(
    ::ee2e::Token* token) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_);
  }
  token_ = token;
  if (token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ee2e.EncryptedRequest.token)
}
inline ::ee2e::Token* EncryptedRequest::release_token() {
  auto temp = unsafe_arena_release_token();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ee2e::Token* EncryptedRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_release:ee2e.EncryptedRequest.token)
  
  ::ee2e::Token* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::ee2e::Token* EncryptedRequest::_internal_mutable_token() {
  
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::ee2e::Token>(GetArena());
    token_ = p;
  }
  return token_;
}
inline ::ee2e::Token* EncryptedRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ee2e.EncryptedRequest.token)
  return _internal_mutable_token();
}
inline void EncryptedRequest::set_allocated_token(::ee2e::Token* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(token);
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    
  } else {
    
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:ee2e.EncryptedRequest.token)
}

// .ee2e.Ciphertext ciphertext = 2;
inline bool EncryptedRequest::_internal_has_ciphertext() const {
  return this != internal_default_instance() && ciphertext_ != nullptr;
}
inline bool EncryptedRequest::has_ciphertext() const {
  return _internal_has_ciphertext();
}
inline void EncryptedRequest::clear_ciphertext() {
  if (GetArena() == nullptr && ciphertext_ != nullptr) {
    delete ciphertext_;
  }
  ciphertext_ = nullptr;
}
inline const ::ee2e::Ciphertext& EncryptedRequest::_internal_ciphertext() const {
  const ::ee2e::Ciphertext* p = ciphertext_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ee2e::Ciphertext*>(
      &::ee2e::_Ciphertext_default_instance_);
}
inline const ::ee2e::Ciphertext& EncryptedRequest::ciphertext() const {
  // @@protoc_insertion_point(field_get:ee2e.EncryptedRequest.ciphertext)
  return _internal_ciphertext();
}
inline void EncryptedRequest::unsafe_arena_set_allocated_ciphertext(
    ::ee2e::Ciphertext* ciphertext) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ciphertext_);
  }
  ciphertext_ = ciphertext;
  if (ciphertext) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ee2e.EncryptedRequest.ciphertext)
}
inline ::ee2e::Ciphertext* EncryptedRequest::release_ciphertext() {
  auto temp = unsafe_arena_release_ciphertext();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ee2e::Ciphertext* EncryptedRequest::unsafe_arena_release_ciphertext() {
  // @@protoc_insertion_point(field_release:ee2e.EncryptedRequest.ciphertext)
  
  ::ee2e::Ciphertext* temp = ciphertext_;
  ciphertext_ = nullptr;
  return temp;
}
inline ::ee2e::Ciphertext* EncryptedRequest::_internal_mutable_ciphertext() {
  
  if (ciphertext_ == nullptr) {
    auto* p = CreateMaybeMessage<::ee2e::Ciphertext>(GetArena());
    ciphertext_ = p;
  }
  return ciphertext_;
}
inline ::ee2e::Ciphertext* EncryptedRequest::mutable_ciphertext() {
  // @@protoc_insertion_point(field_mutable:ee2e.EncryptedRequest.ciphertext)
  return _internal_mutable_ciphertext();
}
inline void EncryptedRequest::set_allocated_ciphertext(::ee2e::Ciphertext* ciphertext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ciphertext_;
  }
  if (ciphertext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ciphertext);
    if (message_arena != submessage_arena) {
      ciphertext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ciphertext, submessage_arena);
    }
    
  } else {
    
  }
  ciphertext_ = ciphertext;
  // @@protoc_insertion_point(field_set_allocated:ee2e.EncryptedRequest.ciphertext)
}

// -------------------------------------------------------------------

// KeyInfo

// string salt_32bytes = 1;
inline void KeyInfo::clear_salt_32bytes() {
  salt_32bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyInfo::salt_32bytes() const {
  // @@protoc_insertion_point(field_get:ee2e.KeyInfo.salt_32bytes)
  return _internal_salt_32bytes();
}
inline void KeyInfo::set_salt_32bytes(const std::string& value) {
  _internal_set_salt_32bytes(value);
  // @@protoc_insertion_point(field_set:ee2e.KeyInfo.salt_32bytes)
}
inline std::string* KeyInfo::mutable_salt_32bytes() {
  // @@protoc_insertion_point(field_mutable:ee2e.KeyInfo.salt_32bytes)
  return _internal_mutable_salt_32bytes();
}
inline const std::string& KeyInfo::_internal_salt_32bytes() const {
  return salt_32bytes_.Get();
}
inline void KeyInfo::_internal_set_salt_32bytes(const std::string& value) {
  
  salt_32bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyInfo::set_salt_32bytes(std::string&& value) {
  
  salt_32bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ee2e.KeyInfo.salt_32bytes)
}
inline void KeyInfo::set_salt_32bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  salt_32bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ee2e.KeyInfo.salt_32bytes)
}
inline void KeyInfo::set_salt_32bytes(const char* value,
    size_t size) {
  
  salt_32bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ee2e.KeyInfo.salt_32bytes)
}
inline std::string* KeyInfo::_internal_mutable_salt_32bytes() {
  
  return salt_32bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyInfo::release_salt_32bytes() {
  // @@protoc_insertion_point(field_release:ee2e.KeyInfo.salt_32bytes)
  return salt_32bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyInfo::set_allocated_salt_32bytes(std::string* salt_32bytes) {
  if (salt_32bytes != nullptr) {
    
  } else {
    
  }
  salt_32bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), salt_32bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ee2e.KeyInfo.salt_32bytes)
}
inline std::string* KeyInfo::unsafe_arena_release_salt_32bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ee2e.KeyInfo.salt_32bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return salt_32bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyInfo::unsafe_arena_set_allocated_salt_32bytes(
    std::string* salt_32bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (salt_32bytes != nullptr) {
    
  } else {
    
  }
  salt_32bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      salt_32bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ee2e.KeyInfo.salt_32bytes)
}

// string ec_public_key_65bytes = 2;
inline void KeyInfo::clear_ec_public_key_65bytes() {
  ec_public_key_65bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyInfo::ec_public_key_65bytes() const {
  // @@protoc_insertion_point(field_get:ee2e.KeyInfo.ec_public_key_65bytes)
  return _internal_ec_public_key_65bytes();
}
inline void KeyInfo::set_ec_public_key_65bytes(const std::string& value) {
  _internal_set_ec_public_key_65bytes(value);
  // @@protoc_insertion_point(field_set:ee2e.KeyInfo.ec_public_key_65bytes)
}
inline std::string* KeyInfo::mutable_ec_public_key_65bytes() {
  // @@protoc_insertion_point(field_mutable:ee2e.KeyInfo.ec_public_key_65bytes)
  return _internal_mutable_ec_public_key_65bytes();
}
inline const std::string& KeyInfo::_internal_ec_public_key_65bytes() const {
  return ec_public_key_65bytes_.Get();
}
inline void KeyInfo::_internal_set_ec_public_key_65bytes(const std::string& value) {
  
  ec_public_key_65bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyInfo::set_ec_public_key_65bytes(std::string&& value) {
  
  ec_public_key_65bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ee2e.KeyInfo.ec_public_key_65bytes)
}
inline void KeyInfo::set_ec_public_key_65bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ec_public_key_65bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ee2e.KeyInfo.ec_public_key_65bytes)
}
inline void KeyInfo::set_ec_public_key_65bytes(const char* value,
    size_t size) {
  
  ec_public_key_65bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ee2e.KeyInfo.ec_public_key_65bytes)
}
inline std::string* KeyInfo::_internal_mutable_ec_public_key_65bytes() {
  
  return ec_public_key_65bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyInfo::release_ec_public_key_65bytes() {
  // @@protoc_insertion_point(field_release:ee2e.KeyInfo.ec_public_key_65bytes)
  return ec_public_key_65bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyInfo::set_allocated_ec_public_key_65bytes(std::string* ec_public_key_65bytes) {
  if (ec_public_key_65bytes != nullptr) {
    
  } else {
    
  }
  ec_public_key_65bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ec_public_key_65bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ee2e.KeyInfo.ec_public_key_65bytes)
}
inline std::string* KeyInfo::unsafe_arena_release_ec_public_key_65bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ee2e.KeyInfo.ec_public_key_65bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ec_public_key_65bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyInfo::unsafe_arena_set_allocated_ec_public_key_65bytes(
    std::string* ec_public_key_65bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ec_public_key_65bytes != nullptr) {
    
  } else {
    
  }
  ec_public_key_65bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ec_public_key_65bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ee2e.KeyInfo.ec_public_key_65bytes)
}

// -------------------------------------------------------------------

// Token

// string salt_3bytes = 1;
inline void Token::clear_salt_3bytes() {
  salt_3bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Token::salt_3bytes() const {
  // @@protoc_insertion_point(field_get:ee2e.Token.salt_3bytes)
  return _internal_salt_3bytes();
}
inline void Token::set_salt_3bytes(const std::string& value) {
  _internal_set_salt_3bytes(value);
  // @@protoc_insertion_point(field_set:ee2e.Token.salt_3bytes)
}
inline std::string* Token::mutable_salt_3bytes() {
  // @@protoc_insertion_point(field_mutable:ee2e.Token.salt_3bytes)
  return _internal_mutable_salt_3bytes();
}
inline const std::string& Token::_internal_salt_3bytes() const {
  return salt_3bytes_.Get();
}
inline void Token::_internal_set_salt_3bytes(const std::string& value) {
  
  salt_3bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Token::set_salt_3bytes(std::string&& value) {
  
  salt_3bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ee2e.Token.salt_3bytes)
}
inline void Token::set_salt_3bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  salt_3bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ee2e.Token.salt_3bytes)
}
inline void Token::set_salt_3bytes(const char* value,
    size_t size) {
  
  salt_3bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ee2e.Token.salt_3bytes)
}
inline std::string* Token::_internal_mutable_salt_3bytes() {
  
  return salt_3bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Token::release_salt_3bytes() {
  // @@protoc_insertion_point(field_release:ee2e.Token.salt_3bytes)
  return salt_3bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Token::set_allocated_salt_3bytes(std::string* salt_3bytes) {
  if (salt_3bytes != nullptr) {
    
  } else {
    
  }
  salt_3bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), salt_3bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ee2e.Token.salt_3bytes)
}
inline std::string* Token::unsafe_arena_release_salt_3bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ee2e.Token.salt_3bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return salt_3bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Token::unsafe_arena_set_allocated_salt_3bytes(
    std::string* salt_3bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (salt_3bytes != nullptr) {
    
  } else {
    
  }
  salt_3bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      salt_3bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ee2e.Token.salt_3bytes)
}

// string hmac_3bytes = 2;
inline void Token::clear_hmac_3bytes() {
  hmac_3bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Token::hmac_3bytes() const {
  // @@protoc_insertion_point(field_get:ee2e.Token.hmac_3bytes)
  return _internal_hmac_3bytes();
}
inline void Token::set_hmac_3bytes(const std::string& value) {
  _internal_set_hmac_3bytes(value);
  // @@protoc_insertion_point(field_set:ee2e.Token.hmac_3bytes)
}
inline std::string* Token::mutable_hmac_3bytes() {
  // @@protoc_insertion_point(field_mutable:ee2e.Token.hmac_3bytes)
  return _internal_mutable_hmac_3bytes();
}
inline const std::string& Token::_internal_hmac_3bytes() const {
  return hmac_3bytes_.Get();
}
inline void Token::_internal_set_hmac_3bytes(const std::string& value) {
  
  hmac_3bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Token::set_hmac_3bytes(std::string&& value) {
  
  hmac_3bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ee2e.Token.hmac_3bytes)
}
inline void Token::set_hmac_3bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hmac_3bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ee2e.Token.hmac_3bytes)
}
inline void Token::set_hmac_3bytes(const char* value,
    size_t size) {
  
  hmac_3bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ee2e.Token.hmac_3bytes)
}
inline std::string* Token::_internal_mutable_hmac_3bytes() {
  
  return hmac_3bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Token::release_hmac_3bytes() {
  // @@protoc_insertion_point(field_release:ee2e.Token.hmac_3bytes)
  return hmac_3bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Token::set_allocated_hmac_3bytes(std::string* hmac_3bytes) {
  if (hmac_3bytes != nullptr) {
    
  } else {
    
  }
  hmac_3bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hmac_3bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ee2e.Token.hmac_3bytes)
}
inline std::string* Token::unsafe_arena_release_hmac_3bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ee2e.Token.hmac_3bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hmac_3bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Token::unsafe_arena_set_allocated_hmac_3bytes(
    std::string* hmac_3bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hmac_3bytes != nullptr) {
    
  } else {
    
  }
  hmac_3bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hmac_3bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ee2e.Token.hmac_3bytes)
}

// -------------------------------------------------------------------

// Ciphertext

// int32 cipher_version = 1;
inline void Ciphertext::clear_cipher_version() {
  cipher_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ciphertext::_internal_cipher_version() const {
  return cipher_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ciphertext::cipher_version() const {
  // @@protoc_insertion_point(field_get:ee2e.Ciphertext.cipher_version)
  return _internal_cipher_version();
}
inline void Ciphertext::_internal_set_cipher_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cipher_version_ = value;
}
inline void Ciphertext::set_cipher_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cipher_version(value);
  // @@protoc_insertion_point(field_set:ee2e.Ciphertext.cipher_version)
}

// string aes_iv_12bytes = 2;
inline void Ciphertext::clear_aes_iv_12bytes() {
  aes_iv_12bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ciphertext::aes_iv_12bytes() const {
  // @@protoc_insertion_point(field_get:ee2e.Ciphertext.aes_iv_12bytes)
  return _internal_aes_iv_12bytes();
}
inline void Ciphertext::set_aes_iv_12bytes(const std::string& value) {
  _internal_set_aes_iv_12bytes(value);
  // @@protoc_insertion_point(field_set:ee2e.Ciphertext.aes_iv_12bytes)
}
inline std::string* Ciphertext::mutable_aes_iv_12bytes() {
  // @@protoc_insertion_point(field_mutable:ee2e.Ciphertext.aes_iv_12bytes)
  return _internal_mutable_aes_iv_12bytes();
}
inline const std::string& Ciphertext::_internal_aes_iv_12bytes() const {
  return aes_iv_12bytes_.Get();
}
inline void Ciphertext::_internal_set_aes_iv_12bytes(const std::string& value) {
  
  aes_iv_12bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ciphertext::set_aes_iv_12bytes(std::string&& value) {
  
  aes_iv_12bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ee2e.Ciphertext.aes_iv_12bytes)
}
inline void Ciphertext::set_aes_iv_12bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aes_iv_12bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ee2e.Ciphertext.aes_iv_12bytes)
}
inline void Ciphertext::set_aes_iv_12bytes(const char* value,
    size_t size) {
  
  aes_iv_12bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ee2e.Ciphertext.aes_iv_12bytes)
}
inline std::string* Ciphertext::_internal_mutable_aes_iv_12bytes() {
  
  return aes_iv_12bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ciphertext::release_aes_iv_12bytes() {
  // @@protoc_insertion_point(field_release:ee2e.Ciphertext.aes_iv_12bytes)
  return aes_iv_12bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ciphertext::set_allocated_aes_iv_12bytes(std::string* aes_iv_12bytes) {
  if (aes_iv_12bytes != nullptr) {
    
  } else {
    
  }
  aes_iv_12bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aes_iv_12bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ee2e.Ciphertext.aes_iv_12bytes)
}
inline std::string* Ciphertext::unsafe_arena_release_aes_iv_12bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ee2e.Ciphertext.aes_iv_12bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return aes_iv_12bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ciphertext::unsafe_arena_set_allocated_aes_iv_12bytes(
    std::string* aes_iv_12bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (aes_iv_12bytes != nullptr) {
    
  } else {
    
  }
  aes_iv_12bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      aes_iv_12bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ee2e.Ciphertext.aes_iv_12bytes)
}

// string ciphertext_nbytes = 3;
inline void Ciphertext::clear_ciphertext_nbytes() {
  ciphertext_nbytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ciphertext::ciphertext_nbytes() const {
  // @@protoc_insertion_point(field_get:ee2e.Ciphertext.ciphertext_nbytes)
  return _internal_ciphertext_nbytes();
}
inline void Ciphertext::set_ciphertext_nbytes(const std::string& value) {
  _internal_set_ciphertext_nbytes(value);
  // @@protoc_insertion_point(field_set:ee2e.Ciphertext.ciphertext_nbytes)
}
inline std::string* Ciphertext::mutable_ciphertext_nbytes() {
  // @@protoc_insertion_point(field_mutable:ee2e.Ciphertext.ciphertext_nbytes)
  return _internal_mutable_ciphertext_nbytes();
}
inline const std::string& Ciphertext::_internal_ciphertext_nbytes() const {
  return ciphertext_nbytes_.Get();
}
inline void Ciphertext::_internal_set_ciphertext_nbytes(const std::string& value) {
  
  ciphertext_nbytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ciphertext::set_ciphertext_nbytes(std::string&& value) {
  
  ciphertext_nbytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ee2e.Ciphertext.ciphertext_nbytes)
}
inline void Ciphertext::set_ciphertext_nbytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ciphertext_nbytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ee2e.Ciphertext.ciphertext_nbytes)
}
inline void Ciphertext::set_ciphertext_nbytes(const char* value,
    size_t size) {
  
  ciphertext_nbytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ee2e.Ciphertext.ciphertext_nbytes)
}
inline std::string* Ciphertext::_internal_mutable_ciphertext_nbytes() {
  
  return ciphertext_nbytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ciphertext::release_ciphertext_nbytes() {
  // @@protoc_insertion_point(field_release:ee2e.Ciphertext.ciphertext_nbytes)
  return ciphertext_nbytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ciphertext::set_allocated_ciphertext_nbytes(std::string* ciphertext_nbytes) {
  if (ciphertext_nbytes != nullptr) {
    
  } else {
    
  }
  ciphertext_nbytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ciphertext_nbytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ee2e.Ciphertext.ciphertext_nbytes)
}
inline std::string* Ciphertext::unsafe_arena_release_ciphertext_nbytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ee2e.Ciphertext.ciphertext_nbytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ciphertext_nbytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ciphertext::unsafe_arena_set_allocated_ciphertext_nbytes(
    std::string* ciphertext_nbytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ciphertext_nbytes != nullptr) {
    
  } else {
    
  }
  ciphertext_nbytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ciphertext_nbytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ee2e.Ciphertext.ciphertext_nbytes)
}

// string aes_tag_16bytes = 4;
inline void Ciphertext::clear_aes_tag_16bytes() {
  aes_tag_16bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ciphertext::aes_tag_16bytes() const {
  // @@protoc_insertion_point(field_get:ee2e.Ciphertext.aes_tag_16bytes)
  return _internal_aes_tag_16bytes();
}
inline void Ciphertext::set_aes_tag_16bytes(const std::string& value) {
  _internal_set_aes_tag_16bytes(value);
  // @@protoc_insertion_point(field_set:ee2e.Ciphertext.aes_tag_16bytes)
}
inline std::string* Ciphertext::mutable_aes_tag_16bytes() {
  // @@protoc_insertion_point(field_mutable:ee2e.Ciphertext.aes_tag_16bytes)
  return _internal_mutable_aes_tag_16bytes();
}
inline const std::string& Ciphertext::_internal_aes_tag_16bytes() const {
  return aes_tag_16bytes_.Get();
}
inline void Ciphertext::_internal_set_aes_tag_16bytes(const std::string& value) {
  
  aes_tag_16bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ciphertext::set_aes_tag_16bytes(std::string&& value) {
  
  aes_tag_16bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ee2e.Ciphertext.aes_tag_16bytes)
}
inline void Ciphertext::set_aes_tag_16bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aes_tag_16bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ee2e.Ciphertext.aes_tag_16bytes)
}
inline void Ciphertext::set_aes_tag_16bytes(const char* value,
    size_t size) {
  
  aes_tag_16bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ee2e.Ciphertext.aes_tag_16bytes)
}
inline std::string* Ciphertext::_internal_mutable_aes_tag_16bytes() {
  
  return aes_tag_16bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ciphertext::release_aes_tag_16bytes() {
  // @@protoc_insertion_point(field_release:ee2e.Ciphertext.aes_tag_16bytes)
  return aes_tag_16bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ciphertext::set_allocated_aes_tag_16bytes(std::string* aes_tag_16bytes) {
  if (aes_tag_16bytes != nullptr) {
    
  } else {
    
  }
  aes_tag_16bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aes_tag_16bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ee2e.Ciphertext.aes_tag_16bytes)
}
inline std::string* Ciphertext::unsafe_arena_release_aes_tag_16bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ee2e.Ciphertext.aes_tag_16bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return aes_tag_16bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ciphertext::unsafe_arena_set_allocated_aes_tag_16bytes(
    std::string* aes_tag_16bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (aes_tag_16bytes != nullptr) {
    
  } else {
    
  }
  aes_tag_16bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      aes_tag_16bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ee2e.Ciphertext.aes_tag_16bytes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ee2e

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ee2e::KeyExchangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ee2e::KeyExchangeType>() {
  return ::ee2e::KeyExchangeType_descriptor();
}
template <> struct is_proto_enum< ::ee2e::MESSAGE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ee2e::MESSAGE>() {
  return ::ee2e::MESSAGE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_key_5fexchange_2eproto
